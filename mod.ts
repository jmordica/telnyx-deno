/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseHttpRequest } from './core/BaseHttpRequest.ts';
import type { OpenAPIConfig } from './core/OpenAPI.ts';
import { FetchHttpRequest } from './core/FetchHttpRequest.ts';

import { AccessTokensService } from './services/AccessTokensService.ts';
import { AdvancedOptInOptOutService } from './services/AdvancedOptInOptOutService.ts';
import { AuthenticationProvidersService } from './services/AuthenticationProvidersService.ts';
import { AutoresponseConfigsService } from './services/AutoresponseConfigsService.ts';
import { AutoResponseSettingsService } from './services/AutoResponseSettingsService.ts';
import { BillingService } from './services/BillingService.ts';
import { BillingGroupsService } from './services/BillingGroupsService.ts';
import { BrandsService } from './services/BrandsService.ts';
import { BucketService } from './services/BucketService.ts';
import { BulkCredentialsService } from './services/BulkCredentialsService.ts';
import { BulkPhoneNumberCampaignsService } from './services/BulkPhoneNumberCampaignsService.ts';
import { BulkSoleProprietorCreationService } from './services/BulkSoleProprietorCreationService.ts';
import { BusinessIdentityService } from './services/BusinessIdentityService.ts';
import { CallCommandsService } from './services/CallCommandsService.ts';
import { CallControlApplicationsService } from './services/CallControlApplicationsService.ts';
import { CallInformationService } from './services/CallInformationService.ts';
import { CallRecordingsService } from './services/CallRecordingsService.ts';
import { CampaignService } from './services/CampaignService.ts';
import { CdrUsageReportsService } from './services/CdrUsageReportsService.ts';
import { ChannelZonesService } from './services/ChannelZonesService.ts';
import { ConferenceCommandsService } from './services/ConferenceCommandsService.ts';
import { ConnectionsService } from './services/ConnectionsService.ts';
import { CredentialConnectionsService } from './services/CredentialConnectionsService.ts';
import { CredentialsService } from './services/CredentialsService.ts';
import { CsvDownloadsService } from './services/CsvDownloadsService.ts';
import { CustomerServiceRecordService } from './services/CustomerServiceRecordService.ts';
import { DebuggingService } from './services/DebuggingService.ts';
import { DetailRecordsService } from './services/DetailRecordsService.ts';
import { DialogflowIntegrationService } from './services/DialogflowIntegrationService.ts';
import { DocumentsService } from './services/DocumentsService.ts';
import { DynamicEmergencyAddressesService } from './services/DynamicEmergencyAddressesService.ts';
import { DynamicEmergencyEndpointsService } from './services/DynamicEmergencyEndpointsService.ts';
import { EnumService } from './services/EnumService.ts';
import { ErrorService } from './services/ErrorService.ts';
import { FqdnConnectionsService } from './services/FqdnConnectionsService.ts';
import { FqdNsService } from './services/FqdNsService.ts';
import { GlobalIPsService } from './services/GlobalIPsService.ts';
import { InboundChannelsService } from './services/InboundChannelsService.ts';
import { InventoryLevelService } from './services/InventoryLevelService.ts';
import { IpAddressesService } from './services/IpAddressesService.ts';
import { IpConnectionsService } from './services/IpConnectionsService.ts';
import { IpRangesService } from './services/IpRangesService.ts';
import { IPsService } from './services/IPsService.ts';
import { ManagedAccountsService } from './services/ManagedAccountsService.ts';
import { MdrDetailReportsService } from './services/MdrDetailReportsService.ts';
import { MdrUsageReportsService } from './services/MdrUsageReportsService.ts';
import { MediaStorageApiService } from './services/MediaStorageApiService.ts';
import { MessagesService } from './services/MessagesService.ts';
import { MessagingHostedNumberService } from './services/MessagingHostedNumberService.ts';
import { MessagingProfilesService } from './services/MessagingProfilesService.ts';
import { MessagingTollfreeVerificationService } from './services/MessagingTollfreeVerificationService.ts';
import { MessagingTollfreeVerificationsService } from './services/MessagingTollfreeVerificationsService.ts';
import { MessagingUrlDomainsService } from './services/MessagingUrlDomainsService.ts';
import { MobileOperatorNetworksService } from './services/MobileOperatorNetworksService.ts';
import { NetworksService } from './services/NetworksService.ts';
import { NotificationsService } from './services/NotificationsService.ts';
import { NumberBackgroundJobsService } from './services/NumberBackgroundJobsService.ts';
import { NumberBlockOrdersService } from './services/NumberBlockOrdersService.ts';
import { NumberBlocksBackgroundJobsService } from './services/NumberBlocksBackgroundJobsService.ts';
import { NumberConfigurationsService } from './services/NumberConfigurationsService.ts';
import { NumberLookupService } from './services/NumberLookupService.ts';
import { NumberOrderDocumentsService } from './services/NumberOrderDocumentsService.ts';
import { NumberOrdersService } from './services/NumberOrdersService.ts';
import { NumberPortoutService } from './services/NumberPortoutService.ts';
import { NumberReservationsService } from './services/NumberReservationsService.ts';
import { NumberSearchService } from './services/NumberSearchService.ts';
import { ObjectService } from './services/ObjectService.ts';
import { OtaUpdatesService } from './services/OtaUpdatesService.ts';
import { OutboundVoiceProfilesService } from './services/OutboundVoiceProfilesService.ts';
import { PhoneNumberCampaignsService } from './services/PhoneNumberCampaignsService.ts';
import { PhoneNumberPortingService } from './services/PhoneNumberPortingService.ts';
import { PortingOrderService } from './services/PortingOrderService.ts';
import { PrivateWirelessGatewaysService } from './services/PrivateWirelessGatewaysService.ts';
import { ProgrammableFaxApplicationsService } from './services/ProgrammableFaxApplicationsService.ts';
import { ProgrammableFaxCommandsService } from './services/ProgrammableFaxCommandsService.ts';
import { PublicInternetGatewaysService } from './services/PublicInternetGatewaysService.ts';
import { PushCredentialsService } from './services/PushCredentialsService.ts';
import { QueueCommandsService } from './services/QueueCommandsService.ts';
import { RecordingsCommandsService } from './services/RecordingsCommandsService.ts';
import { RegionsService } from './services/RegionsService.ts';
import { RegisterCallService } from './services/RegisterCallService.ts';
import { ReportingService } from './services/ReportingService.ts';
import { ReportsService } from './services/ReportsService.ts';
import { RequirementsService } from './services/RequirementsService.ts';
import { RequirementTypesService } from './services/RequirementTypesService.ts';
import { RoomCompositionsService } from './services/RoomCompositionsService.ts';
import { RoomParticipantsService } from './services/RoomParticipantsService.ts';
import { RoomRecordingsService } from './services/RoomRecordingsService.ts';
import { RoomsService } from './services/RoomsService.ts';
import { RoomsClientTokensService } from './services/RoomsClientTokensService.ts';
import { RoomSessionsService } from './services/RoomSessionsService.ts';
import { SharedCampaignsService } from './services/SharedCampaignsService.ts';
import { ShortCodesService } from './services/ShortCodesService.ts';
import { SimCardActionsService } from './services/SimCardActionsService.ts';
import { SimCardGroupActionsService } from './services/SimCardGroupActionsService.ts';
import { SimCardGroupsService } from './services/SimCardGroupsService.ts';
import { SimCardOrdersService } from './services/SimCardOrdersService.ts';
import { SimCardsService } from './services/SimCardsService.ts';
import { TeXmlApplicationsService } from './services/TeXmlApplicationsService.ts';
import { TeXmlRestCommandsService } from './services/TeXmlRestCommandsService.ts';
import { V2Service } from './services/V2Service.ts';
import { VerifiedCallsDisplayProfileService } from './services/VerifiedCallsDisplayProfileService.ts';
import { VerifiedNumbersService } from './services/VerifiedNumbersService.ts';
import { VerifyService } from './services/VerifyService.ts';
import { VirtualCrossConnectsService } from './services/VirtualCrossConnectsService.ts';
import { WdrDetailReportsService } from './services/WdrDetailReportsService.ts';
import { WebhooksService } from './services/WebhooksService.ts';
import { WhatsAppBusinessAccountService } from './services/WhatsAppBusinessAccountService.ts';
import { WhatsAppContactsService } from './services/WhatsAppContactsService.ts';
import { WhatsAppDetailReportsService } from './services/WhatsAppDetailReportsService.ts';
import { WhatsAppMediaService } from './services/WhatsAppMediaService.ts';
import { WhatsAppMessagesService } from './services/WhatsAppMessagesService.ts';
import { WhatsAppMessageTemplateService } from './services/WhatsAppMessageTemplateService.ts';
import { WhatsAppPhoneNumberService } from './services/WhatsAppPhoneNumberService.ts';
import { WhatsAppUsageAggregationsService } from './services/WhatsAppUsageAggregationsService.ts';
import { WireGuardInterfacesService } from './services/WireGuardInterfacesService.ts';

type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;

export class Telnyx {

    public accessTokens: AccessTokensService;
    public advancedOptInOptOut: AdvancedOptInOptOutService;
    public authenticationProviders: AuthenticationProvidersService;
    public autoresponseConfigs: AutoresponseConfigsService;
    public autoResponseSettings: AutoResponseSettingsService;
    public billing: BillingService;
    public billingGroups: BillingGroupsService;
    public brands: BrandsService;
    public bucket: BucketService;
    public bulkCredentials: BulkCredentialsService;
    public bulkPhoneNumberCampaigns: BulkPhoneNumberCampaignsService;
    public bulkSoleProprietorCreation: BulkSoleProprietorCreationService;
    public businessIdentity: BusinessIdentityService;
    public callCommands: CallCommandsService;
    public callControlApplications: CallControlApplicationsService;
    public callInformation: CallInformationService;
    public callRecordings: CallRecordingsService;
    public campaign: CampaignService;
    public cdrUsageReports: CdrUsageReportsService;
    public channelZones: ChannelZonesService;
    public conferenceCommands: ConferenceCommandsService;
    public connections: ConnectionsService;
    public credentialConnections: CredentialConnectionsService;
    public credentials: CredentialsService;
    public csvDownloads: CsvDownloadsService;
    public customerServiceRecord: CustomerServiceRecordService;
    public debugging: DebuggingService;
    public detailRecords: DetailRecordsService;
    public dialogflowIntegration: DialogflowIntegrationService;
    public documents: DocumentsService;
    public dynamicEmergencyAddresses: DynamicEmergencyAddressesService;
    public dynamicEmergencyEndpoints: DynamicEmergencyEndpointsService;
    public enum: EnumService;
    public error: ErrorService;
    public fqdnConnections: FqdnConnectionsService;
    public fqdNs: FqdNsService;
    public globalIPs: GlobalIPsService;
    public inboundChannels: InboundChannelsService;
    public inventoryLevel: InventoryLevelService;
    public ipAddresses: IpAddressesService;
    public ipConnections: IpConnectionsService;
    public ipRanges: IpRangesService;
    public iPs: IPsService;
    public managedAccounts: ManagedAccountsService;
    public mdrDetailReports: MdrDetailReportsService;
    public mdrUsageReports: MdrUsageReportsService;
    public mediaStorageApi: MediaStorageApiService;
    public messages: MessagesService;
    public messagingHostedNumber: MessagingHostedNumberService;
    public messagingProfiles: MessagingProfilesService;
    public messagingTollfreeVerification: MessagingTollfreeVerificationService;
    public messagingTollfreeVerifications: MessagingTollfreeVerificationsService;
    public messagingUrlDomains: MessagingUrlDomainsService;
    public mobileOperatorNetworks: MobileOperatorNetworksService;
    public networks: NetworksService;
    public notifications: NotificationsService;
    public numberBackgroundJobs: NumberBackgroundJobsService;
    public numberBlockOrders: NumberBlockOrdersService;
    public numberBlocksBackgroundJobs: NumberBlocksBackgroundJobsService;
    public numberConfigurations: NumberConfigurationsService;
    public numberLookup: NumberLookupService;
    public numberOrderDocuments: NumberOrderDocumentsService;
    public numberOrders: NumberOrdersService;
    public numberPortout: NumberPortoutService;
    public numberReservations: NumberReservationsService;
    public numberSearch: NumberSearchService;
    public object: ObjectService;
    public otaUpdates: OtaUpdatesService;
    public outboundVoiceProfiles: OutboundVoiceProfilesService;
    public phoneNumberCampaigns: PhoneNumberCampaignsService;
    public phoneNumberPorting: PhoneNumberPortingService;
    public portingOrder: PortingOrderService;
    public privateWirelessGateways: PrivateWirelessGatewaysService;
    public programmableFaxApplications: ProgrammableFaxApplicationsService;
    public programmableFaxCommands: ProgrammableFaxCommandsService;
    public publicInternetGateways: PublicInternetGatewaysService;
    public pushCredentials: PushCredentialsService;
    public queueCommands: QueueCommandsService;
    public recordingsCommands: RecordingsCommandsService;
    public regions: RegionsService;
    public registerCall: RegisterCallService;
    public reporting: ReportingService;
    public reports: ReportsService;
    public requirements: RequirementsService;
    public requirementTypes: RequirementTypesService;
    public roomCompositions: RoomCompositionsService;
    public roomParticipants: RoomParticipantsService;
    public roomRecordings: RoomRecordingsService;
    public rooms: RoomsService;
    public roomsClientTokens: RoomsClientTokensService;
    public roomSessions: RoomSessionsService;
    public sharedCampaigns: SharedCampaignsService;
    public shortCodes: ShortCodesService;
    public simCardActions: SimCardActionsService;
    public simCardGroupActions: SimCardGroupActionsService;
    public simCardGroups: SimCardGroupsService;
    public simCardOrders: SimCardOrdersService;
    public simCards: SimCardsService;
    public teXmlApplications: TeXmlApplicationsService;
    public teXmlRestCommands: TeXmlRestCommandsService;
    public v2: V2Service;
    public verifiedCallsDisplayProfile: VerifiedCallsDisplayProfileService;
    public verifiedNumbers: VerifiedNumbersService;
    public verify: VerifyService;
    public virtualCrossConnects: VirtualCrossConnectsService;
    public wdrDetailReports: WdrDetailReportsService;
    public webhooks: WebhooksService;
    public whatsAppBusinessAccount: WhatsAppBusinessAccountService;
    public whatsAppContacts: WhatsAppContactsService;
    public whatsAppDetailReports: WhatsAppDetailReportsService;
    public whatsAppMedia: WhatsAppMediaService;
    public whatsAppMessages: WhatsAppMessagesService;
    public whatsAppMessageTemplate: WhatsAppMessageTemplateService;
    public whatsAppPhoneNumber: WhatsAppPhoneNumberService;
    public whatsAppUsageAggregations: WhatsAppUsageAggregationsService;
    public wireGuardInterfaces: WireGuardInterfacesService;

    public request: BaseHttpRequest;

    constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {
        this.request = new HttpRequest({
            BASE: config?.BASE ?? 'https://api.telnyx.com/v2',
            VERSION: config?.VERSION ?? '2.0.0',
            WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
            CREDENTIALS: config?.CREDENTIALS ?? 'include',
            TOKEN: config?.TOKEN,
            USERNAME: config?.USERNAME,
            PASSWORD: config?.PASSWORD,
            HEADERS: config?.HEADERS,
            ENCODE_PATH: config?.ENCODE_PATH,
        });

        this.accessTokens = new AccessTokensService(this.request);
        this.advancedOptInOptOut = new AdvancedOptInOptOutService(this.request);
        this.authenticationProviders = new AuthenticationProvidersService(this.request);
        this.autoresponseConfigs = new AutoresponseConfigsService(this.request);
        this.autoResponseSettings = new AutoResponseSettingsService(this.request);
        this.billing = new BillingService(this.request);
        this.billingGroups = new BillingGroupsService(this.request);
        this.brands = new BrandsService(this.request);
        this.bucket = new BucketService(this.request);
        this.bulkCredentials = new BulkCredentialsService(this.request);
        this.bulkPhoneNumberCampaigns = new BulkPhoneNumberCampaignsService(this.request);
        this.bulkSoleProprietorCreation = new BulkSoleProprietorCreationService(this.request);
        this.businessIdentity = new BusinessIdentityService(this.request);
        this.callCommands = new CallCommandsService(this.request);
        this.callControlApplications = new CallControlApplicationsService(this.request);
        this.callInformation = new CallInformationService(this.request);
        this.callRecordings = new CallRecordingsService(this.request);
        this.campaign = new CampaignService(this.request);
        this.cdrUsageReports = new CdrUsageReportsService(this.request);
        this.channelZones = new ChannelZonesService(this.request);
        this.conferenceCommands = new ConferenceCommandsService(this.request);
        this.connections = new ConnectionsService(this.request);
        this.credentialConnections = new CredentialConnectionsService(this.request);
        this.credentials = new CredentialsService(this.request);
        this.csvDownloads = new CsvDownloadsService(this.request);
        this.customerServiceRecord = new CustomerServiceRecordService(this.request);
        this.debugging = new DebuggingService(this.request);
        this.detailRecords = new DetailRecordsService(this.request);
        this.dialogflowIntegration = new DialogflowIntegrationService(this.request);
        this.documents = new DocumentsService(this.request);
        this.dynamicEmergencyAddresses = new DynamicEmergencyAddressesService(this.request);
        this.dynamicEmergencyEndpoints = new DynamicEmergencyEndpointsService(this.request);
        this.enum = new EnumService(this.request);
        this.error = new ErrorService(this.request);
        this.fqdnConnections = new FqdnConnectionsService(this.request);
        this.fqdNs = new FqdNsService(this.request);
        this.globalIPs = new GlobalIPsService(this.request);
        this.inboundChannels = new InboundChannelsService(this.request);
        this.inventoryLevel = new InventoryLevelService(this.request);
        this.ipAddresses = new IpAddressesService(this.request);
        this.ipConnections = new IpConnectionsService(this.request);
        this.ipRanges = new IpRangesService(this.request);
        this.iPs = new IPsService(this.request);
        this.managedAccounts = new ManagedAccountsService(this.request);
        this.mdrDetailReports = new MdrDetailReportsService(this.request);
        this.mdrUsageReports = new MdrUsageReportsService(this.request);
        this.mediaStorageApi = new MediaStorageApiService(this.request);
        this.messages = new MessagesService(this.request);
        this.messagingHostedNumber = new MessagingHostedNumberService(this.request);
        this.messagingProfiles = new MessagingProfilesService(this.request);
        this.messagingTollfreeVerification = new MessagingTollfreeVerificationService(this.request);
        this.messagingTollfreeVerifications = new MessagingTollfreeVerificationsService(this.request);
        this.messagingUrlDomains = new MessagingUrlDomainsService(this.request);
        this.mobileOperatorNetworks = new MobileOperatorNetworksService(this.request);
        this.networks = new NetworksService(this.request);
        this.notifications = new NotificationsService(this.request);
        this.numberBackgroundJobs = new NumberBackgroundJobsService(this.request);
        this.numberBlockOrders = new NumberBlockOrdersService(this.request);
        this.numberBlocksBackgroundJobs = new NumberBlocksBackgroundJobsService(this.request);
        this.numberConfigurations = new NumberConfigurationsService(this.request);
        this.numberLookup = new NumberLookupService(this.request);
        this.numberOrderDocuments = new NumberOrderDocumentsService(this.request);
        this.numberOrders = new NumberOrdersService(this.request);
        this.numberPortout = new NumberPortoutService(this.request);
        this.numberReservations = new NumberReservationsService(this.request);
        this.numberSearch = new NumberSearchService(this.request);
        this.object = new ObjectService(this.request);
        this.otaUpdates = new OtaUpdatesService(this.request);
        this.outboundVoiceProfiles = new OutboundVoiceProfilesService(this.request);
        this.phoneNumberCampaigns = new PhoneNumberCampaignsService(this.request);
        this.phoneNumberPorting = new PhoneNumberPortingService(this.request);
        this.portingOrder = new PortingOrderService(this.request);
        this.privateWirelessGateways = new PrivateWirelessGatewaysService(this.request);
        this.programmableFaxApplications = new ProgrammableFaxApplicationsService(this.request);
        this.programmableFaxCommands = new ProgrammableFaxCommandsService(this.request);
        this.publicInternetGateways = new PublicInternetGatewaysService(this.request);
        this.pushCredentials = new PushCredentialsService(this.request);
        this.queueCommands = new QueueCommandsService(this.request);
        this.recordingsCommands = new RecordingsCommandsService(this.request);
        this.regions = new RegionsService(this.request);
        this.registerCall = new RegisterCallService(this.request);
        this.reporting = new ReportingService(this.request);
        this.reports = new ReportsService(this.request);
        this.requirements = new RequirementsService(this.request);
        this.requirementTypes = new RequirementTypesService(this.request);
        this.roomCompositions = new RoomCompositionsService(this.request);
        this.roomParticipants = new RoomParticipantsService(this.request);
        this.roomRecordings = new RoomRecordingsService(this.request);
        this.rooms = new RoomsService(this.request);
        this.roomsClientTokens = new RoomsClientTokensService(this.request);
        this.roomSessions = new RoomSessionsService(this.request);
        this.sharedCampaigns = new SharedCampaignsService(this.request);
        this.shortCodes = new ShortCodesService(this.request);
        this.simCardActions = new SimCardActionsService(this.request);
        this.simCardGroupActions = new SimCardGroupActionsService(this.request);
        this.simCardGroups = new SimCardGroupsService(this.request);
        this.simCardOrders = new SimCardOrdersService(this.request);
        this.simCards = new SimCardsService(this.request);
        this.teXmlApplications = new TeXmlApplicationsService(this.request);
        this.teXmlRestCommands = new TeXmlRestCommandsService(this.request);
        this.v2 = new V2Service(this.request);
        this.verifiedCallsDisplayProfile = new VerifiedCallsDisplayProfileService(this.request);
        this.verifiedNumbers = new VerifiedNumbersService(this.request);
        this.verify = new VerifyService(this.request);
        this.virtualCrossConnects = new VirtualCrossConnectsService(this.request);
        this.wdrDetailReports = new WdrDetailReportsService(this.request);
        this.webhooks = new WebhooksService(this.request);
        this.whatsAppBusinessAccount = new WhatsAppBusinessAccountService(this.request);
        this.whatsAppContacts = new WhatsAppContactsService(this.request);
        this.whatsAppDetailReports = new WhatsAppDetailReportsService(this.request);
        this.whatsAppMedia = new WhatsAppMediaService(this.request);
        this.whatsAppMessages = new WhatsAppMessagesService(this.request);
        this.whatsAppMessageTemplate = new WhatsAppMessageTemplateService(this.request);
        this.whatsAppPhoneNumber = new WhatsAppPhoneNumberService(this.request);
        this.whatsAppUsageAggregations = new WhatsAppUsageAggregationsService(this.request);
        this.wireGuardInterfaces = new WireGuardInterfacesService(this.request);
    }
}

