{
  "openapi": "3.0.0",
  "info": {
    "x-endpoint-cost": "light",
    "version": "2.0.0",
    "title": "Telnyx API",
    "description": "SIP trunking, SMS, MMS, Call Control and Telephony Data Services.",
    "license": {
      "name": "MIT"
    },
    "contact": {
      "email": "support@telnyx.com"
    }
  },
  "servers": [
    {
      "url": "https://api.telnyx.com/v2",
      "description": "Version 2.0.0 of the Telnyx API"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication Providers",
      "description": "Authentication Provider operations"
    },
    {
      "name": "Call Commands",
      "description": "Call Control command operations"
    },
    {
      "name": "Call Information",
      "description": "Call information"
    },
    {
      "name": "Call Recordings",
      "description": "Call Recordings operations."
    },
    {
      "name": "Conference Commands",
      "description": "Conference command operations"
    },
    {
      "name": "Programmable Fax Commands",
      "description": "Programmable fax command operations"
    },
    {
      "name": "Queue Commands",
      "description": "Queue commands operations"
    },
    {
      "name": "Recordings Commands",
      "description": "Recordings commands operations"
    }
  ],
  "paths": {
        "/call_events": {
      "get": {
        "summary": "List call events",
        "description": "Filters call events by given filter parameters. Events are ordered by `event_timestamp`. If filter for `call_leg_id` or `call_session_id` is not present, it only filters events from the last 24 hours.\n\n**Note**: Only one `filter[event_timestamp]` can be passed.\n",
        "x-latency-category": "responsive",
        "x-group-parameters": "true",
        "operationId": "listCallEvents",
        "tags": [
          "Debugging"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCallLegId"
          },
          {
            "$ref": "#/components/parameters/FilterCallSessionId"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventStatus"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventType"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampGreaterThan"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampGreaterThanOrEqualTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampLessThan"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampLessThanOrEqualTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampEqualTo"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCallEventsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/calls": {
      "post": {
        "summary": "Dial",
        "description": "Dial a number or SIP URI from a given connection. A successful response will include a `call_leg_id` which can be used to correlate the command with subsequent webhooks.\n\n**Expected Webhooks:**\n\n- `call.initiated`\n- `call.answered` or `call.hangup`\n- `call.machine.detection.ended` if `answering_machine_detection` was requested\n- `call.machine.greeting.ended` if `answering_machine_detection` was requested to detect the end of machine greeting\n- `call.machine.premium.detection.ended` if `answering_machine_detection=premium` was requested\n- `call.machine.premium.greeting.ended` if `answering_machine_detection=premium` was requested and a beep was detected\n- `streaming.started`, `streaming.stopped` or `streaming.failed` if `stream_url` was set\n",
        "operationId": "callDial",
        "tags": [
          "Call Commands"
        ],
        "requestBody": {
          "description": "Call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveCallStatusResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callInitiated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallInitiatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachinePremiumDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachinePremiumDetectionEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachinePremiumGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachinePremiumGreetingEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineDetectionEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineGreetingEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingFailedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/register": {
      "post": {
        "summary": "Register the call for Google Verified Calls",
        "description": "Register the call before dialing to show your brand on callee's phone.",
        "operationId": "registerCall",
        "tags": [
          "Register Call"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Register call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RegisterCallResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/calls/{call_control_id}": {
      "get": {
        "summary": "Retrieve a call status",
        "description": "Returns the status of a call (data is available 10 minutes after call ended).",
        "operationId": "retrieveCallStatus",
        "tags": [
          "Call Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveCallStatusResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/answer": {
      "post": {
        "summary": "Answer call",
        "description": "Answer an incoming call. You must issue this command before executing subsequent commands on an incoming call.\n\n**Expected Webhooks:**\n\n- `call.answered`\n- `streaming.started`, `streaming.stopped` or `streaming.failed` if `stream_url` was set\n",
        "operationId": "callAnswer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Answer call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingFailedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/bridge": {
      "post": {
        "summary": "Bridge calls",
        "description": "Bridge two call control calls.\n\n**Expected Webhooks:**\n\n- `call.bridged` for Leg A\n- `call.bridged` for Leg B\n",
        "operationId": "callBridge",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Bridge call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BridgeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/client_state_update": {
      "put": {
        "summary": "Update client state",
        "description": "Updates client state",
        "operationId": "clientStateUpdate",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Updates client state for every subsequent webhook",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientStateUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {},
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/enqueue": {
      "post": {
        "summary": "Enqueue call",
        "description": "Put the call in a queue.",
        "operationId": "callEnqueue",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Enqueue call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnqueueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callEnqueued": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallEnqueuedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callLeftQueue": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallLeftQueueEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/fork_start": {
      "post": {
        "summary": "Forking start",
        "description": "Call forking allows you to stream the media from a call to a specific target in realtime. \nThis stream can be used to enable realtime audio analysis to support a \nvariety of use cases, including fraud detection, or the creation of AI-generated audio responses. \nRequests must specify either the `target` attribute or the `rx` and `tx` attributes.\n\n**Expected Webhooks:**\n\n- `call.fork.started`\n- `call.fork.stopped`\n\n**Simple Telnyx RTP Encapsulation Protocol (STREP)**\n\n*Note: This header/encapsulation is not used when the `rx` and `tx`\nparameters have been specified; it only applies when media is forked\nusing the `target` attribute.*\n\nIf the destination for forked media is specified using the \"target\"\nattribute, the RTP will be encapsulated in an extra Telnyx protocol,\nwhich adds a 24 byte header to the RTP payload in each packet. The STREP\nheader includes the Call Control `call_leg_id` for stream\nidentification, along with bits that represent the direction (inbound or\noutbound) of the media. This 24-byte header sits between the UDP header\nand the RTP header.\n\nThe STREP header makes it possible to fork RTP for multiple calls (or\ntwo RTP streams for the same call) to the same IP:port, where the\nstreams can be demultiplexed by your application using the information\nin the header. Of course, it's still possible to ignore this header\ncompletely, for example, if sending forked media for different calls to\ndifferent ports or IP addresses. In this case, simply strip 24 bytes\n(or use the second byte to find the header length) from the received UDP\npayload to get the RTP (RTP header and payload).\n\n```\nSTREP Specification\n\n  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |1 1|Version|L|D|    HeaderLen  |  reserved (2 bytes)           |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |       reserved (4 bytes, for UDP ports or anything else)      |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |               The call_leg_id                                 |\n |                   from Call Control                           |\n |                       (128 bits / 16 bytes)                   |\n |                           (this is binary data)               |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n 11\n   Static bits 11, always set to 11 to easily distinguish forked media\n   from RTP (10) and T.38 media (usually 00) and SIP (which begins\n   with a capital letter, so begins with bits 01). This is a magic number.\n\n Version\n   Four bits to indicate the version number of the protocol, starting at 0001.\n\n L\n   One bit to represent the leg of the call (A or B).\n   0 represents the A (first) leg of the call.\n   1 represents the B (second) leg of the call.\n\n D\n   One bit to represent the direction of this RTP stream.\n   0 represents media received by Telnyx.\n   1 represents media transmitted by Telnyx.\n\n HeaderLen (1 byte)\n   The length of the header in bytes.\n   Note that this value does not include the length of the payload. The total\n   size of the RTP can be calculated by subtracting the HeaderLen from the UDP\n   length (minus 8 for the UDP header).\n   In version 1, this value will always be 24.\n\n Reserved (6 bytes)\n   Reserved for future use and to make sure that the header is a multiple of 32 bits\n\n Call Leg ID\n   A 128-bit identifier for the call leg.\n   This is the call_leg_id from Call Control.\n```\n",
        "operationId": "callForkStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Fork media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callForkStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callForkStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/fork_stop": {
      "post": {
        "summary": "Forking stop",
        "description": "Stop forking a call.\n\n**Expected Webhooks:**\n\n- `call.fork.stopped`\n",
        "operationId": "callForkStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop forking media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callForkStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather": {
      "post": {
        "summary": "Gather",
        "description": "Gather DTMF signals to build interactive menus.\n\nYou can pass a list of valid digits. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the `gather` command.\n\n**Expected Webhooks:**\n\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "callGather",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_stop": {
      "post": {
        "summary": "Gather stop",
        "description": "Stop current gather.\n\n**Expected Webhooks:**\n\n- `call.gather.ended`\n",
        "operationId": "callGatherStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop current gather",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopGatherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_audio": {
      "post": {
        "summary": "Gather using audio",
        "description": "Play an audio file on the call until the required DTMF signals are gathered to build interactive menus.\n\nYou can pass a list of valid digits along with an 'invalid_audio_url', which will be played back at the beginning of each prompt. Playback will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the `gather_using_audio` command.\n\n**Expected Webhooks:**\n\n- `call.playback.started`\n- `call.playback.ended`\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "callGatherUsingAudio",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using audio request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingAudioRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_speak": {
      "post": {
        "summary": "Gather using speak",
        "description": "Convert text to speech and play it on the call until the required DTMF signals are gathered to build interactive menus.\n\nYou can pass a list of valid digits along with an 'invalid_payload', which will be played back at the beginning of each prompt. Speech will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the `gather_using_speak` command.\n\n**Expected Webhooks:**\n\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "callGatherUsingSpeak",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using speak request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingSpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/hangup": {
      "post": {
        "summary": "Hangup call",
        "description": "Hang up the call.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n- `call.recording.saved`\n",
        "operationId": "callHangup",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Hangup request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HangupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingError": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callRecordingErrorEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/leave_queue": {
      "post": {
        "summary": "Remove call from a queue",
        "description": "Removes the call from a queue.",
        "operationId": "leaveQueue",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Removes the call from the queue, the call currently is enqueued in.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveQueueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callLeftQueue": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallLeftQueueEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/playback_start": {
      "post": {
        "summary": "Play audio URL",
        "description": "Play an audio file on the call. If multiple play audio commands are issued consecutively,\nthe audio files will be placed in a queue awaiting playback.\n\n*Notes:*\n\n- When `overlay` is enabled, `target_legs` is limited to `self`.\n- A customer cannot Play Audio with `overlay=true` unless there is a Play Audio with `overlay=false` actively playing.\n\n**Expected Webhooks:**\n\n- `call.playback.started`\n- `call.playback.ended`\n",
        "operationId": "callPlaybackStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Play audio URL request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayAudioUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/playback_stop": {
      "post": {
        "summary": "Stop audio playback",
        "description": "Stop audio being played on the call.\n\n**Expected Webhooks:**\n\n- `call.playback.ended` or `call.speak.ended`\n",
        "operationId": "callPlaybackStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop audio playback request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaybackStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_pause": {
      "post": {
        "summary": "Record pause",
        "description": "Pause recording the call. Recording can be resumed via Resume recording command.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callRecordPause",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Pause recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_resume": {
      "post": {
        "summary": "Record resume",
        "description": "Resume recording the call.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callRecordResume",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Resume recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_start": {
      "post": {
        "summary": "Recording start",
        "description": "Start recording the call. Recording will stop on call hang-up, or can be initiated via the Stop Recording command.\n\n**Expected Webhooks:**\n\n- `call.recording.saved`\n",
        "operationId": "callRecordStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start recording audio request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_stop": {
      "post": {
        "summary": "Recording stop",
        "description": "Stop recording the call.\n\n**Expected Webhooks:**\n\n- `call.recording.saved`\n",
        "operationId": "callRecordStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingError": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callRecordingErrorEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/refer": {
      "post": {
        "summary": "SIP Refer a call",
        "description": "Initiate a SIP Refer on a Call Control call. You can initiate a SIP Refer at any point in the duration of a call.\n\n**Expected Webhooks:**\n\n- `call.refer.started`\n- `call.refer.completed`\n- `call.refer.failed`\n",
        "operationId": "callRefer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Refer request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callReferStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callReferCompleted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferCompletedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callReferFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferFailedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/reject": {
      "post": {
        "summary": "Reject a call",
        "description": "Reject an incoming call.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n",
        "operationId": "callReject",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Reject request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/send_dtmf": {
      "post": {
        "summary": "Send DTMF",
        "description": "Sends DTMF tones from this leg. DTMF tones will be heard by the other end of the call.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callSendDTMF",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Send DTMF request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDTMFRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/speak": {
      "post": {
        "summary": "Speak text",
        "description": "Convert text to speech and play it back on the call. If multiple speak text commands are issued consecutively, the audio files will be placed in a queue awaiting playback.\n\n**Expected Webhooks:**\n\n- `call.speak.started`\n- `call.speak.ended`\n",
        "operationId": "callSpeak",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Speak request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/streaming_start": {
      "post": {
        "summary": "Streaming start",
        "description": "Start streaming the media from a call to a specific WebSocket address or Dialogflow connection in near-realtime. Audio will be delivered as base64-encoded RTP payload (raw audio), wrapped in JSON payloads. \n\n**Example: Starting a stream to a Websocket address**\n\n The `stream_url` param is mandatory.\n\n```\ncurl -X POST \\ \n  --header \"Content-Type: application/json\" \\ \n  --header \"Accept: application/json\" \\ \n  --header \"Authorization: Bearer YOUR_API_KEY\" \\ \n  --data '{\n \"stream_url\": \"wss://www.example.com/websocket\",\\ \n\"client_state\":\"aGF2ZSBhIG5pY2UgZGF5ID1d\",\\ \n\"command_id\":\"891510ac-f3e4-11e8-af5b-de00688a4901\" \\ \n}' \\ \n  https://api.telnyx.com/v2/calls/{call_control_id}/actions/streaming_start \n``` \n\n **Example: Starting a stream to a Dialogflow connection** \n\n Enable the Dialogflow integration by sending `\"enable_dialogflow\": true` in the request. You need to have a Dialogflow connection associated with your Call Control application first, [click here for instructions](https://developers.telnyx.com/docs/v2/call-control/tutorials/dialogflow-es).\n```\ncurl -X POST \\ \n  --header \"Content-Type: application/json\" \\ \n  --header \"Accept: application/json\" \\ \n  --header \"Authorization: Bearer YOUR_API_KEY\" \\ \n  --data '{\n \"client_state\":\"aGF2ZSBhIG5pY2UgZGF5ID1d\", \\ \n\"command_id\":\"891510ac-f3e4-11e8-af5b-de00688a4901\", \\ \n\"enable_dialogflow\": true \\ \n}' \\ \n  https://api.telnyx.com/v2/calls/{call_control_id}/actions/streaming_start \n```\n\n**Expected Webhooks:**\n\n- `streaming.started`\n- `streaming.stopped`\n- `streaming.failed`\n\n**WebSocket events**\n\nWhen the WebSocket connection is established, the following event is being sent over it:\n```\n{\n  \"event\": \"connected\",\n  \"version\": \"1.0.0\"\n}\n```\nAnd when the call is started, an event which contains information about the encoding and `stream_id` that identifies a particular stream:\n```\n{\n  \"event\": \"start\",\n  \"sequence_number\": \"1\",\n  \"start\": {\n    \"user_id\": \"3e6f995f-85f7-4705-9741-53b116d28237\",\n    \"call_control_id\": \"v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg\", \n    \"client_state\": \"aGF2ZSBhIG5pY2UgZGF5ID1d\",\n    \"media_format\": {\n      \"encoding\": \"audio/x-mulaw\",\n      \"sample_rate\": 8000,\n      \"channels\": 1\n    }\n  },\n  \"stream_id\": \"32de0dea-53cb-4b21-89a4-9e1819c043bc\"\n}\n```\nThe start event is followed by the following media events that contain base64-encoded RTP payload (raw audio, no RTP headers) (:\n```\n{ \n  \"event\": \"media\",\n  \"sequence_number\": \"4\",\n  \"media\": { \n    \"track\": \"inbound/outbound\", \n    \"chunk\": \"2\",\n    \"timestamp\": \"5\",\n    \"payload\": \"no+JhoaJjpzSHxAKBgYJD...IsSbjomGhoqQn1Ic\" \n  },\n  \"stream_id\": \"32de0dea-53cb-4b21-89a4-9e1819c043bc\" \n}\n```\nPlease note that the order of events is not guaranteed and the chunk number can be used to reorder the events.\n\nWhen the call ends, the stop event over WebSockets connection is sent:\n```\n{ \n  \"event\": \"stop\",\n  \"sequence_number\": \"5\",\n  \"stop\": {\n    \"user_id\": \"3e6f995f-85f7-4705-9741-53b116d28237\",\n    \"call_control_id\": \"v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ\"\n   },\n    \"stream_id\": \"32de0dea-53cb-4b21-89a4-9e1819c043bc\" \n }\n```\n\n**Bidirectional Media Streaming**\n\nMedia can be sent back to the call through the websocket as well. This is done in a way very similar to the [playback_start](https://developers.telnyx.com/docs/api/v2/call-control/Call-Commands#callPlaybackStart)\ncommand, when using a base64 encoded mp3 file in the payload. Simply send a packet to the websocket connection as follows:\n\n```\n{\n  \"event\": \"media\",\n  \"media\": {\n    \"payload\" : <your base64 encoded mp3 file>\n  }\n}\n```\n\nThe payload, which is a base64-encoded mp3 file, will be played on the call.\n\nSome limitations to be aware of:\n\n- Media payloads can only be submitted once per second.\n- Media _must_ be base64 encoded mp3\n\n**Stream Errors**\n\nAny errors in the media packet, including when a rate limit is reached, will result in an error frame being\nsent to your websocket server. The error frame will appear as follows:\n\n```\n{\n  \"stream_id\": \"32de0dea-53cb-4b21-89a4-9e1819c043bc\",\n  \"event\": \"error\",\n  \"sequence_number\": \"6\",\n  \"error\": {\n    \"title\": \"rate_limit_reached\",\n    \"code\": \"100005\",\n    \"detail\": \"Too many requests\"\n  }\n}\n```\n\nPossible errors are as follows:\n\n- Error 100002: `\"unknown_error\"`\n- Error 100003: `\"malformed_frame\"`\n- Error 100004: `\"invalid_media\"`\n- Error 100005: `\"rate_limit_reached\"`\n",
        "operationId": "callStreamingStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start streaming media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartStreamingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callStreamingStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callStreamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callStreamingFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingFailedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/streaming_stop": {
      "post": {
        "summary": "Streaming stop",
        "description": "Stop streaming a call to a WebSocket.\n\n**Expected Webhooks:**\n\n- `streaming.stopped`\n",
        "operationId": "callStreamingStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop streaming media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopStreamingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callStreamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transcription_start": {
      "post": {
        "summary": "Transcription start",
        "description": "Start real-time transcription. Transcription will stop on call hang-up, or can be initiated via the Transcription stop command.\n\n**Expected Webhooks:**\n\n- `call.transcription`\n",
        "operationId": "callTranscriptionStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transcription start request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptionStartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "transcription": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TranscriptionEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transcription_stop": {
      "post": {
        "summary": "Transcription stop",
        "description": "Stop real-time transcription.",
        "operationId": "callTranscriptionStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transcription stop request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptionStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transfer": {
      "post": {
        "summary": "Transfer call",
        "description": "Transfer a call to a new destination. If the transfer is unsuccessful, a `call.hangup` webhook for the other call (Leg B) will be sent indicating that the transfer could not be completed. The original call will remain active and may be issued additional commands, potentially transfering the call to an alternate destination.\n\n**Expected Webhooks:**\n\n- `call.initiated`\n- `call.bridged` to Leg B\n- `call.answered` or `call.hangup`\n- `call.machine.detection.ended` if `answering_machine_detection` was requested\n- `call.machine.greeting.ended` if `answering_machine_detection` was requested to detect the end of machine greeting\n- `call.machine.premium.detection.ended` if `answering_machine_detection=premium` was requested\n- `call.machine.premium.greeting.ended` if `answering_machine_detection=premium` was requested and a beep was detected\n",
        "operationId": "callTransfer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transfer call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callInitiated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallInitiatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachinePremiumDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachinePremiumDetectionEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachinePremiumGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachinePremiumGreetingEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineDetectionEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineGreetingEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences": {
      "get": {
        "x-group-parameters": "true",
        "x-latency-category": "responsive",
        "description": "Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by `expires_at`.",
        "summary": "List conferences",
        "operationId": "listConferences",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterConferenceName"
          },
          {
            "$ref": "#/components/parameters/FilterConferenceStatus"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListConferencesResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        }
      },
      "post": {
        "summary": "Create conference",
        "description": "Create a conference from an existing call leg using a `call_control_id` and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.\n\n**Expected Webhooks:**\n\n- `conference.created`\n- `conference.participant.joined`\n- `conference.participant.left`\n- `conference.ended`\n- `conference.recording.saved`\n- `conference.floor.changed`\n",
        "operationId": "createConference",
        "tags": [
          "Conference Commands"
        ],
        "requestBody": {
          "description": "Create a conference",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceCreated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceCreatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceFloorChanged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceFloorChangedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{conference_id}/participants": {
      "get": {
        "description": "Lists conference participants",
        "summary": "List conference participants",
        "operationId": "listConferenceParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "conference_id",
            "description": "Uniquely identifies the conference by id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[muted]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are/are not muted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[on_hold]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are/are not put on hold",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[whispering]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are whispering or are not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListParticipantsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}": {
      "get": {
        "summary": "Retrieve a conference",
        "description": "Retrieve an existing conference",
        "operationId": "retrieveConference",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/dial_participant": {
      "post": {
        "x-latency-category": "interactive",
        "summary": "Dial a new participant into a conference",
        "description": "Dials a phone number and, when the call is answered, automatically joins them into the specified conference.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n- `call.answered`\n- `conference.participant.joined`\n- `conference.participant.left`\n",
        "operationId": "conferenceDialParticipantIn",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Dial Into Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conferences/{id}/actions/hold": {
      "post": {
        "summary": "Hold conference participants",
        "description": "Hold a list of participants in a conference call",
        "operationId": "conferenceHoldParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceHoldRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/join": {
      "post": {
        "summary": "Join a conference",
        "description": "Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the `call_control_id` of the leg you wish to join to the conference as an attribute. The conference can have up to a certain amount of active participants, as set by the `max_participants` parameter in conference creation request. \n\n**Expected Webhooks:**\n\n- `conference.participant.joined`\n- `conference.participant.left`\n",
        "operationId": "conferenceJoin",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Join Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/leave": {
      "post": {
        "summary": "Leave a conference",
        "description": "Removes a call leg from a conference and moves it back to parked state. **Expected Webhooks:**\n\n- `conference.participant.left`\n",
        "operationId": "conferenceLeave",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Leave Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/mute": {
      "post": {
        "summary": "Mute conference participants",
        "description": "Mute a list of participants in a conference call",
        "operationId": "conferenceMuteParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceMuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/play": {
      "post": {
        "summary": "Play audio to conference participants",
        "description": "Play audio to all or some participants on a conference call.",
        "operationId": "conferencePlayAudio",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferencePlayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferencePlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferencePlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferencePlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferencePlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_pause": {
      "post": {
        "summary": "Conference recording pause",
        "description": "Pause conference recording.",
        "operationId": "conferencePauseRecording",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseConferenceRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_resume": {
      "post": {
        "summary": "Conference recording resume",
        "description": "Resume conference recording.",
        "operationId": "conferenceResumeRecording",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeConferenceRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_start": {
      "post": {
        "summary": "Conference recording start",
        "description": "Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.\n\n**Expected Webhooks:**\n\n- `conference.recording.saved`",
        "operationId": "conferenceStartRecording",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference to record by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartConferenceRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_stop": {
      "post": {
        "summary": "Conference recording stop",
        "description": "Stop recording the conference.\n\n**Expected Webhooks:**\n\n- `conference.recording.saved`\n",
        "operationId": "conferenceStopRecording",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference to stop the recording for by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Stop recording conference request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/speak": {
      "post": {
        "summary": "Speak text to conference participants",
        "description": "Convert text to speech and play it to all or some participants.",
        "operationId": "conferenceSpeakText",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceSpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/stop": {
      "post": {
        "summary": "Stop audio being played on the conference",
        "description": "Stop audio being played to all or some participants on a conference call.",
        "operationId": "conferenceStopAudio",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/unhold": {
      "post": {
        "summary": "Unhold conference participants",
        "description": "Unhold a list of participants in a conference call",
        "operationId": "conferenceUnholdParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceUnholdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/unmute": {
      "post": {
        "summary": "Unmute conference participants",
        "description": "Unmute a list of participants in a conference call",
        "operationId": "conferenceUnmuteParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceUnmuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/update": {
      "post": {
        "summary": "Update conference participant",
        "description": "Update conference participant supervisor_role",
        "operationId": "conferenceUpdate",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/faxes": {
      "get": {
        "summary": "View a list of faxes",
        "description": "",
        "operationId": "ListFaxes",
        "x-latency-category": "background",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date time for filtering faxes created after or on that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.521992Z"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "ISO 8601 date time for filtering faxes created after that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.521992Z"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "ISO 8601 formatted date time for filtering faxes created on or before that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.521992Z"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "ISO 8601 formatted date time for filtering faxes created before that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.521992Z"
            }
          },
          {
            "name": "filter[direction][eq]",
            "in": "query",
            "description": "The direction, inbound or outbound, for filtering faxes sent from this account",
            "schema": {
              "type": "string",
              "example": "inbound"
            }
          },
          {
            "name": "filter[from][eq]",
            "in": "query",
            "description": "The phone number, in E.164 format for filtering faxes sent from this number",
            "schema": {
              "type": "string",
              "example": "+13127367276"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Number of fax resourcxes for the single page returned",
            "schema": {
              "type": "integer",
              "example": 2
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Number of the page to be retrieved",
            "schema": {
              "type": "integer",
              "example": 2
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListFaxesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Send a fax",
        "operationId": "SendFax",
        "description": "Send a fax. Files have size limits and page count limit validations. If a file is bigger than 50MB or has more than 350 pages it will fail with `file_size_limit_exceeded` and `page_count_limit_exceeded` respectively. \n\n**Expected Webhooks:**\n\n- `fax.queued`\n- `fax.media.processed`\n- `fax.sending.started`\n- `fax.delivered`\n- `fax.failed`\n",
        "tags": [
          "Programmable Fax Commands"
        ],
        "requestBody": {
          "description": "Send fax request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendFaxRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SendFaxMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/SendFaxResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "fax.queued": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxQueued"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.media.processed": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxMediaProcessed"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.sending.started": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxSendingStarted"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.delivered": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxDelivered"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.failed": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxFailed"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes/{id}": {
      "delete": {
        "summary": "Delete a fax",
        "operationId": "DeleteFax",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "View a fax",
        "operationId": "ViewFax",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetFaxResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes/{id}/actions/cancel": {
      "post": {
        "summary": "Cancel a fax",
        "description": "Cancel the outbound fax that is in one of the following states: `queued`, `media.processed`, `originated` or `sending` ",
        "operationId": "CancelFax",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/CancelFaxResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes/{id}/actions/refresh": {
      "post": {
        "summary": "Refresh a fax",
        "description": "Refreshes the inbound fax's media_url when it has expired",
        "operationId": "RefreshFax",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RefreshFaxResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/media": {
      "get": {
        "summary": "List uploaded media",
        "description": "Returns a list of stored media files.",
        "operationId": "listMediaStorage",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "name": "filter[content_type][]",
            "in": "query",
            "description": "Filters files by given content types",
            "schema": {
              "type": "string",
              "example": "application_xml"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "post": {
        "summary": "Upload media",
        "description": "Upload media file to Telnyx so it can be used with other Telnyx services",
        "operationId": "createMediaStorage",
        "tags": [
          "Media Storage API"
        ],
        "requestBody": {
          "description": "Upload media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadMediaRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadMediaMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/media/{media_name}": {
      "delete": {
        "summary": "Deletes stored media",
        "description": "Deletes a stored media file.",
        "operationId": "deleteMediaStorage",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "204": {
            "description": "The media was deleted successfully."
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "get": {
        "summary": "Retrieve stored media",
        "description": "Returns the information about a stored media file.",
        "operationId": "getMediaStorage",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "put": {
        "summary": "Update stored media",
        "description": "Updates a stored media file.",
        "operationId": "updateMediaStorage",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "requestBody": {
          "description": "Update media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMediaRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMediaMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/media/{media_name}/download": {
      "get": {
        "summary": "Download stored media",
        "description": "Downloads a stored media file.",
        "operationId": "downloadMediaStorage",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaDownloadResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}": {
      "get": {
        "summary": "Retrieve a call queue",
        "description": "Retrieve an existing call queue",
        "operationId": "retrieveCallQueue",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueueResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}/calls": {
      "get": {
        "summary": "Retrieve calls from a queue",
        "description": "Retrieve the list of calls in an existing queue",
        "operationId": "listQueueCalls",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListQueueCallsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}/calls/{call_control_id}": {
      "get": {
        "summary": "Retrieve a call from a queue",
        "description": "Retrieve an existing call from an existing queue",
        "operationId": "retrieveCallFromQueue",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueueCallResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/recordings": {
      "get": {
        "description": "Lists recordings for the authenticated user",
        "summary": "List recordings",
        "operationId": "listRecordings",
        "tags": [
          "Recordings Commands"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "filter[conference_id]",
            "in": "query",
            "description": "Return only recordings associated with a given conference",
            "required": false,
            "schema": {
              "type": "string",
              "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
            }
          },
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "Return only recordings created later than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "Return only recordings created earlier than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRecordingsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/recordings/actions/delete": {
      "description": "Permanently deletes a list of call recordings.",
      "summary": "Deletes a list of call recordings"
    },
    "/recordings/{id}": {
      "get": {
        "description": "Retrieve a recording from the authenticated user's recordings",
        "summary": "Retrieve a recording",
        "operationId": "retrieveRecording",
        "tags": [
          "Recordings Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the recording",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/recordings/{recording_id}": {
      "delete": {
        "summary": "Delete a call recording",
        "description": "Permanently deletes a call recording.",
        "operationId": "deleteRecording",
        "tags": [
          "Call Recordings"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RecordingId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Retrieve call recording",
        "description": "Retrieves the details of an existing call recording.",
        "operationId": "getRecording",
        "tags": [
          "Call Recordings"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RecordingId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    }
  },
  "components": {
    "parameters": {
      "FilterCallLegId": {
        "name": "filter[call_leg_id]",
        "in": "query",
        "description": "The unique identifier of an individual call leg.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterCallSessionId": {
        "name": "filter[call_session_id]",
        "in": "query",
        "description": "The unique identifier of the call control session. A session may include multiple call leg events.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterConferenceName": {
        "name": "filter[name]",
        "in": "query",
        "description": "If present, conferences will be filtered to those with a matching `name` attribute. Matching is case-sensitive",
        "schema": {
          "type": "string"
        }
      },
      "FilterConferenceStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "If present, conferences will be filtered by status.",
        "schema": {
          "type": "string",
          "enum": [
            "init",
            "in_progress",
            "completed"
          ]
        }
      },
      "FilterCallEventStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "Event status",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "delivered",
            "failed"
          ],
          "example": "delivered"
        }
      },
      "FilterCallEventType": {
        "name": "filter[type]",
        "in": "query",
        "description": "Event type",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "command",
            "webhook"
          ],
          "example": "webhook"
        }
      },
      "FilterCallEventTimestampGreaterThan": {
        "name": "filter[event_timestamp][gt]",
        "in": "query",
        "description": "Event timestamp: greater than",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampGreaterThanOrEqualTo": {
        "name": "filter[event_timestamp][gte]",
        "in": "query",
        "description": "Event timestamp: greater than or equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampLessThan": {
        "name": "filter[event_timestamp][lt]",
        "in": "query",
        "description": "Event timestamp: lower than",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampLessThanOrEqualTo": {
        "name": "filter[event_timestamp][lte]",
        "in": "query",
        "description": "Event timestamp: lower than or equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampEqualTo": {
        "name": "filter[event_timestamp][eq]",
        "in": "query",
        "description": "Event timestamp: equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "PageNumber": {
        "name": "page[number]",
        "in": "query",
        "description": "The page number to load",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "PageSize": {
        "name": "page[size]",
        "in": "query",
        "description": "The size of the page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 250,
          "default": 20
        }
      },
      "CallControlId": {
        "name": "call_control_id",
        "description": "Unique identifier and token for controlling the call",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RecordingId": {
        "name": "recording_id",
        "description": "Uniquely identifies the recording by id.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "MediaName": {
        "name": "media_name",
        "description": "Uniquely identifies a media resource.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "ListCallEventsResponse": {
        "description": "Successful response with a list of call events.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Call Events Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallEvent"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListConferencesResponse": {
        "description": "Successful response with a list of conferences.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Conferences Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conference"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GenericErrorResponse": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "RetrieveCallStatusResponse": {
        "description": "Successful response with details about a call status.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Call Status Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        }
      },
      "RecordingResponseBody": {
        "description": "A response with recording resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecordingResponse"
            }
          }
        }
      },
      "RecordingsResponseBody": {
        "description": "A response with recordings.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecordingResponse"
                  }
                }
              }
            }
          }
        }
      },
      "RegisterCallResponse": {
        "description": "Successful response upon making a register call command.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Register Call Response",
              "properties": {
                "data": {
                  "type": "object",
                  "title": "Register Call Command Result",
                  "example": {
                    "result": "ok"
                  },
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CallControlCommandResponse": {
        "description": "Successful response upon making a call control command.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Call Control Command Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallControlCommandResult"
                }
              }
            }
          }
        }
      },
      "UnauthorizedResponse": {
        "description": "Unauthorized"
      },
      "UnprocessableEntityResponse": {
        "description": "Unprocessable entity"
      },
      "ConferenceResponse": {
        "description": "Successful response with details about a conference.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Conference Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Conference"
                }
              }
            }
          }
        }
      },
      "ListParticipantsResponse": {
        "description": "Successful response with a list of conference participants.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Participants Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Participant"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "NotFoundResponse": {
        "description": "Conference does not exist"
      },
      "ConferenceCommandResponse": {
        "description": "Successful response upon making a conference command.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Conference Command Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ConferenceCommandResult"
                }
              }
            }
          }
        }
      },
      "ListFaxesResponse": {
        "description": "List faxes response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Faxes Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fax"
                  }
                },
                "meta": {
                  "type": "object",
                  "example": {
                    "page_number": 2,
                    "page_size": 1,
                    "total_pages": 3,
                    "total_results": 3
                  }
                }
              }
            }
          }
        }
      },
      "SendFaxResponse": {
        "description": "Send fax response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Send Fax Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Fax"
                }
              }
            }
          }
        }
      },
      "GetFaxResponse": {
        "description": "Get fax response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Get Fax Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Fax"
                }
              }
            }
          }
        }
      },
      "CancelFaxResponse": {
        "description": "Successful response upon accepting cancel fax command",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Successful response upon accepting cancel fax command",
              "example": {
                "data": {
                  "result": "ok"
                }
              },
              "properties": {
                "result": {
                  "type": "string",
                  "example": "ok"
                }
              }
            }
          }
        }
      },
      "RefreshFaxResponse": {
        "description": "Refresh fax response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Refresh Fax Response",
              "example": {
                "data": {
                  "result": "ok"
                }
              },
              "properties": {
                "result": {
                  "type": "string",
                  "example": "ok"
                }
              }
            }
          }
        }
      },
      "ListMediaResponse": {
        "description": "A response with a list of media resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List of media resources response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MediaResource"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "MediaResponse": {
        "description": "A response describing a media resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Media resource response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MediaResource"
                }
              }
            }
          }
        }
      },
      "MediaDownloadResponse": {
        "description": "A response describing a media resource",
        "content": {
          "*/*": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "QueueResponse": {
        "description": "Successful response with details about a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Queue Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          }
        }
      },
      "ListQueueCallsResponse": {
        "description": "Successful response with a list of calls in a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Queue Calls Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueueCall"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "QueueCallResponse": {
        "description": "Successful response with details about a call in a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Queue Call Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/QueueCall"
                }
              }
            }
          }
        }
      },
      "ListRecordingsResponse": {
        "description": "Successful response with a list of recordings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Recordings Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Recording"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "RecordingResponse": {
        "description": "Successful response with details about a recording.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Get Recording Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Recording"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "AnswerRequest": {
        "type": "object",
        "title": "Answer Request",
        "properties": {
          "billing_group_id": {
            "description": "Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.",
            "type": "string",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE response.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "sip_headers": {
            "description": "SIP headers to be added to the SIP INVITE response. Currently only User-to-User header is supported.",
            "type": "array",
            "example": [
              {
                "name": "User-to-User",
                "value": "value"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SipHeader"
            }
          },
          "sound_modifications": {
            "$ref": "#/components/schemas/SoundModifications"
          },
          "stream_url": {
            "description": "The destination WebSocket address where the stream is going to be delivered.",
            "type": "string",
            "example": "wss://www.example.com/websocket"
          },
          "stream_track": {
            "description": "Specifies which track should be streamed.",
            "type": "string",
            "enum": [
              "inbound_track",
              "outbound_track",
              "both_tracks"
            ],
            "default": "inbound_track",
            "example": "both_tracks"
          },
          "send_silence_when_idle": {
            "description": "Generate silence RTP packets when no transmission available.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "send_silence_when_idle": true
        }
      },
      "BridgeRequest": {
        "type": "object",
        "title": "Bridge Request",
        "required": [
          "call_control_id"
        ],
        "properties": {
          "call_control_id": {
            "description": "The Call Control ID of the call you want to bridge with, can't be used together with queue parameter or video_room_id parameter.",
            "type": "string",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "queue": {
            "description": "The name of the queue you want to bridge with, can't be used together with call_control_id parameter or video_room_id parameter. Bridging with a queue means bridging with the first call in the queue. The call will always be removed from the queue regardless of whether bridging succeeds. Returns an error when the queue is empty.",
            "type": "string",
            "example": "support"
          },
          "video_room_id": {
            "description": "The ID of the video room you want to bridge with, can't be used together with call_control_id parameter or queue parameter.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "video_room_context": {
            "description": "The additional parameter that will be passed to the video conference. It is a text field and the user can decide how to use it. For example, you can set the participant name or pass JSON text. It can be used only with video_room_id parameter.",
            "type": "string",
            "example": "Alice"
          },
          "park_after_unbridge": {
            "description": "Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred). If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the default behavior is to hang up the leg.",
            "type": "string",
            "example": "self"
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "park_after_unbridge": "self"
        }
      },
      "Call": {
        "type": "object",
        "title": "Call",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type"
        ],
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "is_alive": false,
          "call_duration": 50,
          "record_type": "call"
        },
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "call"
            ],
            "example": "call"
          },
          "call_session_id": {
            "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call.",
            "type": "string",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "is_alive": {
            "description": "Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is asynchronous).",
            "type": "boolean",
            "example": true
          },
          "client_state": {
            "description": "State received from a command.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "call_duration": {
            "description": "Indicates the duration of the call in seconds",
            "type": "integer",
            "example": 50
          }
        }
      },
      "CallAnswered": {
        "type": "object",
        "title": "Call Answered",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.answered",
            "enum": [
              "call.answered"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "custom_headers": {
                "description": "Custom headers set on answer command",
                "type": "array",
                "example": [
                  {
                    "name": "head_1",
                    "value": "val_1"
                  },
                  {
                    "name": "head_2",
                    "value": "val_2"
                  }
                ],
                "items": {
                  "$ref": "#/components/schemas/CustomSipHeader"
                }
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "state": {
                "type": "string",
                "example": "answered",
                "enum": [
                  "answered"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.answered",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "state": "answered"
          }
        }
      },
      "CallAnsweredEvent": {
        "type": "object",
        "title": "Call Answered Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallAnswered"
          }
        }
      },
      "CallBridged": {
        "type": "object",
        "title": "Call Bridged",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.bridged",
            "enum": [
              "call.bridged"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "state": {
                "type": "string",
                "example": "bridged",
                "enum": [
                  "bridged"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.bridged",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "state": "bridged"
          }
        }
      },
      "CallBridgedEvent": {
        "type": "object",
        "title": "Call Bridged Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallBridged"
          }
        }
      },
      "CallControlCommandResult": {
        "type": "object",
        "title": "Call Control Command Result",
        "example": {
          "result": "ok"
        },
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          }
        }
      },
      "CallCost": {
        "type": "object",
        "title": "Call Cost Received Event",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.cost",
            "enum": [
              "call.cost"
            ],
            "description": "The type of the event being delivered"
          },
          "id": {
            "type": "string",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "format": "uuid",
            "description": "Uniquely identifies a webhook"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "meta": {
            "type": "object",
            "properties": {
              "meta": {
                "type": "object",
                "properties": {
                  "attempt": {
                    "type": "integer",
                    "description": "The number of attempts made to deliver the webhook",
                    "example": 1,
                    "minimum": 1
                  },
                  "delivered_to": {
                    "type": "string",
                    "description": "The URL where webhook was sent",
                    "example": "https://example.com"
                  }
                }
              }
            }
          },
          "payload": {
            "type": "object",
            "properties": {
              "billed_duration_secs": {
                "type": "integer",
                "description": "The number of seconds for which this call will be billed",
                "example": 0,
                "minimum": 0
              },
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Identifies the type of resource."
              },
              "cost_parts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "billed_duration_secs": {
                      "type": "integer",
                      "description": "The number of seconds for which this item will be billed",
                      "example": 0,
                      "minimum": 0
                    },
                    "call_part": {
                      "type": "string",
                      "description": "The service incurring a charge",
                      "example": "call-control"
                    },
                    "cost": {
                      "type": "number",
                      "description": "The billed cost of the item, in currency shown in the `currency` field",
                      "example": 0.0,
                      "minimum": 0.0
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency in which `cost` is measured",
                      "example": "USD"
                    },
                    "rate": {
                      "type": "number",
                      "description": "The cost per unit of the item incurring a charge",
                      "example": 0.001,
                      "minimum": 0.0
                    }
                  }
                }
              },
              "total_cost": {
                "type": "number",
                "description": "The billed cost of the call",
                "example": 0.0,
                "minimum": 0.0
              },
              "status": {
                "type": "string",
                "enum": [
                  "valid",
                  "invalid",
                  "call_hangup",
                  "cancelled",
                  "cancelled_amd"
                ],
                "example": "valid",
                "description": "Reflects how command ended."
              }
            }
          }
        }
      },
      "CallDtmfReceived": {
        "type": "object",
        "title": "Call DTMF Received",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.dtmf.received",
            "enum": [
              "call.dtmf.received"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Identifies the type of resource."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "digit": {
                "type": "string",
                "example": "#",
                "description": "The received DTMF digit or symbol."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.dtmf.received",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "digit": "#"
          }
        }
      },
      "CallDtmfReceivedEvent": {
        "type": "object",
        "title": "Call DTMF Received Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallDtmfReceived"
          }
        }
      },
      "CallEnqueued": {
        "type": "object",
        "title": "Call Enqueued",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.enqueued",
            "enum": [
              "call.enqueued"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "queue": {
                "type": "string",
                "example": "support",
                "description": "The name of the queue"
              },
              "current_position": {
                "type": "integer",
                "example": 7,
                "description": "Current position of the call in the queue."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.enqueued",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "queue": "support",
            "current_position": 5
          }
        }
      },
      "CallEnqueuedEvent": {
        "type": "object",
        "title": "Call Enqueued Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallEnqueued"
          }
        }
      },
      "CallEvent": {
        "type": "object",
        "title": "Call Event",
        "required": [
          "record_type",
          "call_leg_id",
          "call_session_id",
          "event_timestamp",
          "name",
          "type",
          "metadata"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "call_event"
            ],
            "example": "call_event"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Uniquely identifies an individual call leg.",
            "example": "308fe500-5213-11e9-ace7-02420a0f0668"
          },
          "call_session_id": {
            "type": "string",
            "description": "Uniquely identifies the call control session. A session may include multiple call leg events.",
            "example": "308fec30-5213-11e9-9d3f-02420a0f0668"
          },
          "event_timestamp": {
            "type": "string",
            "description": "Event timestamp",
            "example": "2019-03-29T11:10:19.127783Z"
          },
          "name": {
            "type": "string",
            "description": "Event name",
            "example": "call.hangup"
          },
          "type": {
            "type": "string",
            "description": "Event type",
            "enum": [
              "command",
              "webhook"
            ],
            "example": "webhook"
          },
          "metadata": {
            "type": "object",
            "description": "Event metadata, which includes raw event, and extra information based on event type"
          }
        },
        "example": {
          "record_type": "call_event",
          "call_leg_id": "308fe500-5213-11e9-ace7-02420a0f0668",
          "call_session_id": "308fec30-5213-11e9-9d3f-02420a0f0668",
          "event_timestamp": "2019-03-29T11:10:19.127783Z",
          "name": "call.hangup",
          "type": "webhook",
          "metadata": {}
        }
      },
      "CallForkStarted": {
        "type": "object",
        "title": "Call Fork Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.fork.started",
            "enum": [
              "call.fork.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "stream_type": {
                "type": "string",
                "example": "raw",
                "enum": [
                  "raw",
                  "decrypted"
                ],
                "description": "Type of media streamed. It can be either 'raw' or 'decrypted'."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.fork.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "stream_type": "decrypted"
          }
        }
      },
      "CallForkStartedEvent": {
        "type": "object",
        "title": "Call Fork Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallForkStarted"
          }
        }
      },
      "CallForkStopped": {
        "type": "object",
        "title": "Call Fork Stopped",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.fork.stopped",
            "enum": [
              "call.fork.stopped"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "stream_type": {
                "type": "string",
                "example": "raw",
                "enum": [
                  "raw",
                  "decrypted"
                ],
                "description": "Type of media streamed. It can be either 'raw' or 'decrypted'."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.fork.stopped",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "stream_type": "decrypted"
          }
        }
      },
      "CallForkStoppedEvent": {
        "type": "object",
        "title": "Call Fork Stopped Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallForkStopped"
          }
        }
      },
      "CallForwarding": {
        "description": "The call forwarding settings for a phone number.",
        "type": "object",
        "properties": {
          "call_forwarding_enabled": {
            "type": "boolean",
            "default": true,
            "description": "Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.",
            "example": true
          },
          "forwards_to": {
            "type": "string",
            "description": "The phone number to which inbound calls to this number are forwarded. Inbound calls will not be forwarded if this field is left blank. If set, must be a +E.164-formatted phone number."
          },
          "forwarding_type": {
            "type": "string",
            "description": "Call forwarding type. 'forwards_to' must be set for this to have an effect.",
            "enum": [
              "always",
              "on_failure"
            ],
            "example": "always"
          }
        },
        "example": {
          "call_forwarding_enabled": true,
          "forwards_to": "+13035559123",
          "forwarding_type": "always"
        }
      },
      "CallGatherEnded": {
        "type": "object",
        "title": "Call Gather Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.gather.ended",
            "enum": [
              "call.gather.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "digits": {
                "type": "string",
                "example": "5503",
                "description": "The received DTMF digit or symbol."
              },
              "status": {
                "type": "string",
                "enum": [
                  "valid",
                  "invalid",
                  "call_hangup",
                  "cancelled",
                  "cancelled_amd",
                  "timeout"
                ],
                "example": "valid",
                "description": "Reflects how command ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.gather.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "digits": "123",
            "status": "valid"
          }
        }
      },
      "CallGatherEndedEvent": {
        "type": "object",
        "title": "Call Gather Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallGatherEnded"
          }
        }
      },
      "CallHangup": {
        "type": "object",
        "title": "Call Hangup",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.hangup",
            "enum": [
              "call.hangup"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "start_time": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when the call started."
              },
              "state": {
                "type": "string",
                "example": "hangup",
                "enum": [
                  "hangup"
                ],
                "description": "State received from a command."
              },
              "hangup_cause": {
                "type": "string",
                "example": "call_rejected",
                "enum": [
                  "call_rejected",
                  "normal_clearing",
                  "originator_cancel",
                  "timeout",
                  "time_limit",
                  "user_busy",
                  "not_found",
                  "unspecified"
                ],
                "description": "The reason the call was ended (`call_rejected`, `normal_clearing`, `originator_cancel`, `timeout`, `time_limit`, `user_busy`, `not_found` or `unspecified`)."
              },
              "hangup_source": {
                "type": "string",
                "example": "caller",
                "enum": [
                  "caller",
                  "callee",
                  "unknown"
                ],
                "description": "The party who ended the call (`callee`, `caller`, `unknown`)."
              },
              "sip_hangup_cause": {
                "type": "string",
                "example": "603",
                "description": "The reason the call was ended (SIP response code). If the SIP response is unavailable (in inbound calls for example) this is set to `unspecified`."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.hangup",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "start_time": "2018-02-02T22:20:27.521992Z",
            "state": "hangup",
            "hangup_cause": "call_rejected",
            "hangup_source": "caller",
            "sip_hangup_cause": "603"
          }
        }
      },
      "CallHangupEvent": {
        "type": "object",
        "title": "Call Hangup Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallHangup"
          }
        }
      },
      "CallInitiated": {
        "type": "object",
        "title": "Call Initiated",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.initiated",
            "enum": [
              "call.initiated"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "custom_headers": {
                "description": "Custom headers from sip invite",
                "type": "array",
                "example": [
                  {
                    "name": "head_1",
                    "value": "val_1"
                  },
                  {
                    "name": "head_2",
                    "value": "val_2"
                  }
                ],
                "items": {
                  "$ref": "#/components/schemas/CustomSipHeader"
                }
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "direction": {
                "type": "string",
                "example": "incoming",
                "enum": [
                  "incoming",
                  "outgoing"
                ],
                "description": "Whether the call is `incoming` or `outgoing`."
              },
              "state": {
                "type": "string",
                "example": "parked",
                "enum": [
                  "parked",
                  "bridging"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.initiated",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "direction": "incoming",
            "state": "parked"
          }
        }
      },
      "CallInitiatedEvent": {
        "type": "object",
        "title": "Call Initiated Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallInitiated"
          }
        }
      },
      "CallLeftQueue": {
        "type": "object",
        "title": "Call Left Queue",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.dequeued",
            "enum": [
              "call.dequeued"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "queue": {
                "type": "string",
                "example": "support",
                "description": "The name of the queue"
              },
              "queue_position": {
                "type": "integer",
                "example": 7,
                "description": "Last position of the call in the queue."
              },
              "reason": {
                "type": "string",
                "description": "The reason for leaving the queue",
                "example": "bridged",
                "enum": [
                  "bridged",
                  "bridging-in-process",
                  "hangup",
                  "leave",
                  "timeout"
                ]
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.dequeued",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "queue": "support",
            "queue_position": 3,
            "reason": "leave"
          }
        }
      },
      "CallLeftQueueEvent": {
        "type": "object",
        "title": "Call Left Queue Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallLeftQueue"
          }
        }
      },
      "CallMachineDetectionEnded": {
        "type": "object",
        "title": "Call Machine Detection Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.machine.detection.ended",
            "enum": [
              "call.machine.detection.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "result": {
                "type": "string",
                "example": "machine",
                "enum": [
                  "human",
                  "machine",
                  "not_sure"
                ],
                "description": "Answering machine detection result."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.detection.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "human"
          }
        }
      },
      "CallMachineDetectionEndedEvent": {
        "type": "object",
        "title": "Call Machine Detection Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachineDetectionEnded"
          }
        }
      },
      "CallMachineGreetingEnded": {
        "type": "object",
        "title": "Call Machine Greeting Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.machine.greeting.ended",
            "enum": [
              "call.machine.greeting.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "result": {
                "type": "string",
                "example": "ended",
                "enum": [
                  "ended",
                  "not_sure"
                ],
                "description": "Answering machine greeting ended result."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.greeting.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "ended"
          }
        }
      },
      "CallMachineGreetingEndedEvent": {
        "type": "object",
        "title": "Call Machine Greeting Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachineGreetingEnded"
          }
        }
      },
      "CallMachinePremiumDetectionEnded": {
        "type": "object",
        "title": "Call Machine Premium Detection Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.machine.premium.detection.ended",
            "enum": [
              "call.machine.premium.detection.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "result": {
                "type": "string",
                "example": "machine",
                "enum": [
                  "human_residence",
                  "human_business",
                  "machine",
                  "silence",
                  "fax_detected"
                ],
                "description": "Premium Answering Machine Detection result."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.premium.detection.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "machine"
          }
        }
      },
      "CallMachinePremiumDetectionEndedEvent": {
        "type": "object",
        "title": "Call Machine Premium Detection Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachinePremiumDetectionEnded"
          }
        }
      },
      "CallMachinePremiumGreetingEnded": {
        "type": "object",
        "title": "Call Machine Premium Greeting Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.machine.premium.greeting.ended",
            "enum": [
              "call.machine.premium.greeting.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "result": {
                "type": "string",
                "example": "beep_detected",
                "enum": [
                  "beep_detected"
                ],
                "description": "Premium Answering Machine Greeting Ended result."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.premium.greeting.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "beep_detected"
          }
        }
      },
      "CallMachinePremiumGreetingEndedEvent": {
        "type": "object",
        "title": "Call Machine Premium Greeting Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachinePremiumGreetingEnded"
          }
        }
      },
      "CallPlaybackEnded": {
        "type": "object",
        "title": "Call Playback Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.playback.ended",
            "enum": [
              "call.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "overlay": {
                "type": "boolean",
                "example": false,
                "description": "Whether the stopped audio was in overlay mode or not."
              },
              "status": {
                "type": "string",
                "enum": [
                  "file_not_found",
                  "call_hangup",
                  "unknown",
                  "failed",
                  "cancelled_amd",
                  "completed",
                  "failed"
                ],
                "example": "completed",
                "description": "Reflects how command ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "media_name": "my_media_uploaded_to_media_storage_api",
            "overlay": false,
            "status": "completed"
          }
        }
      },
      "CallPlaybackEndedEvent": {
        "type": "object",
        "title": "Call Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallPlaybackEnded"
          }
        }
      },
      "CallPlaybackStarted": {
        "type": "object",
        "title": "Call Playback Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.playback.started",
            "enum": [
              "call.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "overlay": {
                "type": "boolean",
                "example": false,
                "description": "Whether the audio is going to be played in overlay mode or not."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "media_url": "http://example.com/audio.wav",
            "overlay": false
          }
        }
      },
      "CallPlaybackStartedEvent": {
        "type": "object",
        "title": "Call Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallPlaybackStarted"
          }
        }
      },
      "CallRecording": {
        "description": "The call recording settings for a phone number.",
        "type": "object",
        "properties": {
          "inbound_call_recording_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When enabled, any inbound call to this number will be recorded."
          },
          "inbound_call_recording_format": {
            "type": "string",
            "enum": [
              "wav",
              "mp3"
            ],
            "default": "wav",
            "description": "The audio file format for calls being recorded."
          },
          "inbound_call_recording_channels": {
            "type": "string",
            "enum": [
              "single",
              "dual"
            ],
            "default": "single",
            "description": "When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B."
          }
        },
        "example": {
          "inbound_call_recording_enabled": true,
          "inbound_call_recording_format": "wav",
          "inbound_call_recording_channels": "single"
        }
      },
      "CallRecordingSaved": {
        "type": "object",
        "title": "Call Recording Saved",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.recording.saved",
            "enum": [
              "call.recording.saved"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "recording_started_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when recording started."
              },
              "recording_ended_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521992Z",
                "description": "ISO 8601 datetime of when recording ended."
              },
              "channels": {
                "type": "string",
                "example": "single",
                "enum": [
                  "single",
                  "dual"
                ],
                "description": "Whether recording was recorded in `single` or `dual` channel."
              },
              "recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              },
              "public_recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.recording.saved",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "recording_started_at": "2018-02-02T22:20:27.521992Z",
            "recording_ended_at": "2018-02-02T22:20:27.521992Z",
            "channels": "single",
            "recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            },
            "public_recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            }
          }
        }
      },
      "CallRecordingSavedEvent": {
        "type": "object",
        "title": "Call Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallRecordingSaved"
          }
        }
      },
      "CallReferCompleted": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.completed",
            "enum": [
              "call.refer.completed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 200,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.completed",
          "id": "4ce4366d-8d87-44be-a00b-942154e9c5f5",
          "occurred_at": "2020-03-30T13:29:44.650000Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 200,
            "to": "+13129457420"
          }
        }
      },
      "CallReferCompletedEvent": {
        "type": "object",
        "title": "Call Refer Completed Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferCompleted"
          }
        }
      },
      "CallReferFailed": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.failed",
            "enum": [
              "call.refer.failed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 603,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.failed",
          "id": "fbeb70e0-54eb-4e26-8d19-56b43e66f754",
          "occurred_at": "2020-03-30T13:29:42.130013Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 603,
            "to": "+13129457420"
          }
        }
      },
      "CallReferFailedEvent": {
        "type": "object",
        "title": "Call Refer Failed Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferFailed"
          }
        }
      },
      "CallReferStarted": {
        "type": "object",
        "title": "Call Refer Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.started",
            "enum": [
              "call.refer.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 100,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.started",
          "id": "fbeb70e0-54eb-4e26-8d19-56b43e66f754",
          "occurred_at": "2020-03-30T13:29:42.130013Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 100,
            "to": "+13129457420"
          }
        }
      },
      "CallReferStartedEvent": {
        "type": "object",
        "title": "Call Refer Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferStarted"
          }
        }
      },
      "CallRequest": {
        "type": "object",
        "title": "Dial Request",
        "required": [
          "connection_id",
          "to",
          "from"
        ],
        "example": {
          "to": "+18005550100 or sip:username@sip.telnyx.com",
          "from": "+18005550101",
          "from_display_name": "Company Name",
          "connection_id": "7267xxxxxxxxxxxxxx",
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "timeout_secs": 60,
          "timeout_limit_secs": 60,
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "answering_machine_detection": "detect",
          "answering_machine_detection_config": {
            "total_analysis_time_millis": 5000,
            "after_greeting_silence_millis": 1000,
            "between_words_silence_millis": 1000,
            "greeting_duration_millis": 1000,
            "initial_silence_millis": 1000,
            "maximum_number_of_words": 1000,
            "maximum_word_length_millis": 2000,
            "silence_threshold": 512,
            "greeting_total_analysis_time_millis": 50000,
            "greeting_silence_duration_millis": 2000
          },
          "custom_headers": [
            {
              "name": "head_1",
              "value": "val_1"
            },
            {
              "name": "head_2",
              "value": "val_2"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "link_to": "ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg==",
          "sip_auth_username": "username",
          "sip_auth_password": "password",
          "sip_headers": [
            {
              "name": "User-to-User",
              "value": "12345"
            }
          ],
          "stream_url": "wss://www.example.com/websocket",
          "stream_track": "both_tracks",
          "send_silence_when_idle": true,
          "enable_dialogflow": false,
          "dialogflow_config": {
            "analyze_sentiment": false,
            "partial_automated_agent_reply": false
          }
        },
        "properties": {
          "to": {
            "description": "The DID or SIP URI to dial out to. Multiple DID or SIP URIs can be provided using an array of strings",
            "oneOf": [
              {
                "type": "string",
                "example": "+18005550100 or sip:username@sip.telnyx.com"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": "[\"+18005550100\", \"sip:username@sip.telnyx.com\"]"
              }
            ]
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format.",
            "type": "string",
            "example": "+18005550101"
          },
          "from_display_name": {
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "type": "string",
            "example": "Company Name"
          },
          "connection_id": {
            "type": "string",
            "description": "The ID of the Call Control App (formerly ID of the connection) to be used when dialing the destination."
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back to the callee when the call is answered. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back to the callee when the call is answered. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "preferred_codecs": {
            "type": "string",
            "description": "The list of comma-separated codecs in a preferred order for the forked media to be received.",
            "example": "G722,PCMU,PCMA,G729,OPUS,VP8,H264"
          },
          "timeout_secs": {
            "description": "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being called. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.",
            "default": 30,
            "type": "integer",
            "example": 60,
            "format": "int32"
          },
          "time_limit_secs": {
            "description": "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.",
            "default": 14400,
            "type": "integer",
            "example": 600,
            "format": "int32",
            "minimum": 30,
            "maximum": 14400
          },
          "answering_machine_detection": {
            "description": "Enables Answering Machine Detection. Telnyx offers Premium and Standard detections. With Premium detection, when a call is answered, Telnyx runs real-time detection and sends a `call.machine.premium.detection.ended` webhook with one of the following results: `human_residence`, `human_business`, `machine`, `silence` or `fax_detected`. If we detect a beep, we also send a `call.machine.premium.greeting.ended` webhook with the result of `beep_detected`. If we detect a beep before `call.machine.premium.detection.ended` we only send `call.machine.premium.greeting.ended`, and if we detect a beep after `call.machine.premium.detection.ended`, we send both webhooks. With Standard detection, when a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If `greeting_end` or `detect_words` is used and a `machine` is detected, you will receive another `call.machine.greeting.ended` webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive `call.machine.greeting.ended` if a beep is detected.",
            "default": "disabled",
            "type": "string",
            "enum": [
              "premium",
              "detect",
              "detect_beep",
              "detect_words",
              "greeting_end",
              "disabled"
            ]
          },
          "answering_machine_detection_config": {
            "description": "Optional configuration parameters to modify 'answering_machine_detection' performance.",
            "type": "object",
            "properties": {
              "total_analysis_time_millis": {
                "description": "Maximum timeout threshold for overall detection.",
                "default": 3500,
                "type": "integer",
                "example": 5000,
                "format": "int32"
              },
              "after_greeting_silence_millis": {
                "description": "Silence duration threshold after a greeting message or voice for it be considered human.",
                "default": 800,
                "type": "integer",
                "example": 1000,
                "format": "int32"
              },
              "between_words_silence_millis": {
                "description": "Maximum threshold for silence between words.",
                "default": 50,
                "type": "integer",
                "example": 100,
                "format": "int32"
              },
              "greeting_duration_millis": {
                "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine.",
                "default": 3500,
                "type": "integer",
                "example": 1500,
                "format": "int32"
              },
              "initial_silence_millis": {
                "description": "If initial silence duration is greater than this value, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 1800,
                "format": "int32"
              },
              "maximum_number_of_words": {
                "description": "If number of detected words is greater than this value, consder it a machine.",
                "default": 5,
                "type": "integer",
                "example": 3,
                "format": "int32"
              },
              "maximum_word_length_millis": {
                "description": "If a single word lasts longer than this threshold, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              },
              "silence_threshold": {
                "description": "Minimum noise threshold for any analysis.",
                "default": 256,
                "type": "integer",
                "example": 512,
                "format": "int32"
              },
              "greeting_total_analysis_time_millis": {
                "description": "If machine already detected, maximum timeout threshold to determine the end of the machine greeting.",
                "default": 5000,
                "type": "integer",
                "example": 7500,
                "format": "int32"
              },
              "greeting_silence_duration_millis": {
                "description": "If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.",
                "default": 1500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              }
            }
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "billing_group_id": {
            "description": "Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.",
            "type": "string",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore others Dial commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "link_to": {
            "description": "Use another call's control id for sharing the same call session id",
            "type": "string",
            "example": "ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg=="
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string"
          },
          "sip_headers": {
            "description": "SIP headers to be added to the SIP INVITE request. Currently only User-to-User header is supported.",
            "type": "array",
            "example": [
              {
                "name": "User-to-User",
                "value": "value"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SipHeader"
            }
          },
          "sound_modifications": {
            "$ref": "#/components/schemas/SoundModifications"
          },
          "stream_url": {
            "description": "The destination WebSocket address where the stream is going to be delivered.",
            "type": "string",
            "example": "wss://www.example.com/websocket"
          },
          "stream_track": {
            "description": "Specifies which track should be streamed.",
            "type": "string",
            "enum": [
              "inbound_track",
              "outbound_track",
              "both_tracks"
            ],
            "default": "inbound_track",
            "example": "both_tracks"
          },
          "send_silence_when_idle": {
            "description": "Generate silence RTP packets when no transmission available.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          },
          "record": {
            "description": "Start recording automatically after an event. Disabled by default.",
            "type": "string",
            "enum": [
              "record-from-answer"
            ],
            "example": "record-from-answer"
          },
          "record_channels": {
            "description": "Defines which channel should be recorded ('single' or 'dual') when `record` is specified.",
            "type": "string",
            "enum": [
              "single",
              "dual"
            ],
            "default": "dual",
            "example": "single"
          },
          "record_format": {
            "description": "Defines the format of the recording ('wav' or 'mp3') when `record` is specified.",
            "type": "string",
            "enum": [
              "wav",
              "mp3"
            ],
            "default": "mp3",
            "example": "wav"
          },
          "record_max_length": {
            "description": "Defines the maximum length for the recording in seconds when `record` is specified. The minimum value is 0. The maximum value is 43200. The default value is 0 (infinite).",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "example": 1000
          },
          "record_timeout_secs": {
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected when `record` is specified. The timer only starts when the speech is detected. The minimum value is 0. The default value is 0 (infinite).",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "example": 100
          },
          "enable_dialogflow": {
            "description": "Enables Dialogflow for the current call. The default value is false.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "dialogflow_config": {
            "$ref": "#/components/schemas/DialogflowConfig"
          }
        }
      },
      "CallSpeakEnded": {
        "type": "object",
        "title": "Call Speak Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.speak.ended",
            "enum": [
              "call.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "status": {
                "type": "string",
                "example": "completed",
                "enum": [
                  "completed",
                  "call_hangup",
                  "cancelled_amd"
                ],
                "description": "Reflects how the command ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "status": "completed"
          }
        }
      },
      "CallSpeakEndedEvent": {
        "type": "object",
        "title": "Call Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSpeakEnded"
          }
        }
      },
      "CallSpeakStarted": {
        "type": "object",
        "title": "Call Speak Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.speak.started",
            "enum": [
              "call.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        }
      },
      "CallSpeakStartedEvent": {
        "type": "object",
        "title": "Call Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSpeakStarted"
          }
        }
      },
      "CallStreamingFailed": {
        "type": "object",
        "title": "Streaming Failed",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the resource."
          },
          "event_type": {
            "type": "string",
            "example": "streaming.failed",
            "enum": [
              "streaming.failed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "25dc3731-e51e-4927-a50d-a61cc25984b1",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-15T14:11:24.613295Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "failure_reason": {
                "type": "string",
                "example": "connection_failed",
                "description": "A short description explaning why the media streaming failed."
              },
              "stream_id": {
                "type": "string",
                "format": "uuid",
                "example": "1edb94f9-7ef0-4150-b502-e0ebadfd9491",
                "description": "Identifies the streaming."
              },
              "stream_params": {
                "type": "object",
                "description": "Streaming parameters as they were originally given to the Call Control API.",
                "properties": {
                  "stream_url": {
                    "type": "string",
                    "example": "wss://www.example.com/websocket",
                    "description": "The destination WebSocket address where the stream is going to be delivered."
                  },
                  "track": {
                    "description": "Specifies which track should be streamed.",
                    "type": "string",
                    "enum": [
                      "inbound_track",
                      "outbound_track",
                      "both_tracks"
                    ],
                    "default": "inbound_track",
                    "example": "inbound_track"
                  }
                }
              },
              "stream_type": {
                "type": "string",
                "example": "websocket",
                "enum": [
                  "websocket",
                  "dialogflow"
                ],
                "description": "The type of stream connection the stream is performing."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "streaming.failed",
          "id": "25dc3731-e51e-4927-a50d-a61cc25984b1",
          "occurred_at": "2021-12-15T14:11:24.613295Z",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "failure_reason": "connection_failed",
            "stream_id": "1edb94f9-7ef0-4150-b502-e0ebadfd9491",
            "stream_params": {
              "stream_url": "wss://www.example.com/websocket",
              "stream_track": "inbound_track"
            },
            "stream_type": "websocket"
          }
        }
      },
      "CallStreamingFailedEvent": {
        "type": "object",
        "title": "Streaming Failed Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallStreamingFailed"
          }
        }
      },
      "CallStreamingStarted": {
        "type": "object",
        "title": "Streaming Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "streaming.started",
            "enum": [
              "streaming.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-15T14:06:32.059436Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "stream_url": {
                "type": "string",
                "example": "wss://www.example.com/websocket",
                "description": "Destination WebSocket address where the stream is going to be delivered."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "streaming.started",
          "id": "7d743d69-f7e8-4761-b7d4-8cacf9d3c031",
          "occurred_at": "2021-12-15T14:06:32.059436Z",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "stream_url": "wss://www.example.com/websocket"
          }
        }
      },
      "CallStreamingStartedEvent": {
        "type": "object",
        "title": "Streaming Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallStreamingStarted"
          }
        }
      },
      "CallStreamingStopped": {
        "type": "object",
        "title": "Streaming Stopped",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "streaming.stopped",
            "enum": [
              "streaming.stopped"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "25dc3731-e51e-4927-a50d-a61cc25984b1",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-15T14:11:24.613295Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "stream_url": {
                "type": "string",
                "example": "wss://www.example.com/websocket",
                "description": "Destination WebSocket address where the stream is going to be delivered."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "streaming.stopped",
          "id": "25dc3731-e51e-4927-a50d-a61cc25984b1",
          "occurred_at": "2021-12-15T14:11:24.613295Z",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "stream_url": "wss://www.example.com/websocket"
          }
        }
      },
      "CallStreamingStoppedEvent": {
        "type": "object",
        "title": "Streaming Stopped Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallStreamingStopped"
          }
        }
      },
      "CallbackWebhookMeta": {
        "type": "object",
        "properties": {
          "attempt": {
            "type": "integer",
            "description": "The number of times the callback webhook has been attempted.",
            "example": 1
          },
          "delivered_to": {
            "type": "string",
            "description": "The URL that the callback webhook was delivered to.",
            "example": "https://example.com/webhook"
          }
        }
      },
      "ClientStateUpdateRequest": {
        "type": "object",
        "title": "Update client state Request",
        "required": [
          "client_state"
        ],
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d"
        }
      },
      "Conference": {
        "type": "object",
        "title": "Conference",
        "required": [
          "record_type",
          "id",
          "name",
          "created_at",
          "expires_at"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "conference"
            ],
            "example": "conference"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the conference",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the conference",
            "example": "All hands meeting"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference will expire",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "region": {
            "type": "string",
            "description": "Region where the conference is hosted",
            "example": "sv1"
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "in_progress",
              "completed"
            ],
            "description": "Status of the conference",
            "example": "completed"
          },
          "end_reason": {
            "type": "string",
            "enum": [
              "all_left",
              "ended_via_api",
              "host_left",
              "time_exceeded"
            ],
            "description": "Reason why the conference ended",
            "example": "all_left"
          },
          "ended_by": {
            "type": "object",
            "description": "IDs related to who ended the conference. It is expected for them to all be there or all be null",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call Control ID which ended the conference",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=="
              },
              "call_session_id": {
                "type": "string",
                "description": "Call Session ID which ended the conference",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              }
            }
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the conference",
            "example": "3fa85f64-9191-4567-b3fc-2c963f66afa6"
          }
        },
        "example": {
          "record_type": "conference",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "All hands meeting",
          "created_at": "2019-01-23T18:10:02.574Z",
          "expires_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "region": "sv1",
          "status": "completed",
          "end_reason": "all_left",
          "ended_by": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "call_session_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          },
          "connection_id": "3fa85f64-9191-4567-b3fc-2c963f66afa6"
        }
      },
      "ConferenceCallRequest": {
        "required": [
          "call_control_id",
          "from",
          "to"
        ],
        "type": "object",
        "title": "Conference Dial Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number).",
            "type": "string",
            "example": "+18005550101"
          },
          "hold": {
            "description": "Whether the participant should be put on hold immediately after joining the conference.",
            "example": true,
            "type": "boolean",
            "default": false
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participant when they are put on hold after joining the conference. If media_name is also supplied, this is currently ignored. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "mute": {
            "description": "Whether the participant should be muted immediately after joining the conference.",
            "example": false,
            "type": "boolean",
            "default": false
          },
          "start_conference_on_enter": {
            "description": "Whether the conference should be started after the participant joins the conference.",
            "example": true,
            "type": "boolean",
            "default": false
          },
          "supervisor_role": {
            "description": "Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "to": {
            "description": "The DID or SIP URI to dial out and bridge to the given call.",
            "type": "string",
            "example": "+18005550100 or sip:username@sip.telnyx.com"
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "hold": true,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "mute": true,
          "from": "+18005550101",
          "to": "+18005550100",
          "start_conference_on_enter": true,
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ]
        }
      },
      "ConferenceCommandResult": {
        "type": "object",
        "title": "Conference Command Result",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          }
        },
        "example": {
          "result": "ok"
        }
      },
      "ConferenceCreated": {
        "type": "object",
        "title": "Conference Created",
        "example": {
          "record_type": "event",
          "event_type": "conference.created",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.created",
            "enum": [
              "conference.created"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceCreatedEvent": {
        "type": "object",
        "title": "Conference Created Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceCreated"
          }
        }
      },
      "ConferenceDetailRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Conference id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "name": {
            "type": "string",
            "description": "Conference name",
            "example": "My Conference"
          },
          "user_id": {
            "type": "string",
            "description": "User id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "started_at": {
            "type": "string",
            "description": "Conference start time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "ended_at": {
            "type": "string",
            "description": "Conference end time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "expires_at": {
            "type": "string",
            "description": "Conference expiry time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "region": {
            "type": "string",
            "description": "Region where the conference is hosted",
            "example": "ch1"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies the conference call leg",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_session_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies with conference call session",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "connection_id": {
            "type": "string",
            "description": "Connection id",
            "example": "1583941447772537867"
          },
          "call_sec": {
            "type": "integer",
            "description": "Duration of the conference call in seconds",
            "example": 100
          },
          "participant_count": {
            "type": "integer",
            "description": "Number of participants that joined the conference call",
            "example": 5
          },
          "participant_call_sec": {
            "type": "integer",
            "description": "Sum of the conference call duration for all participants in seconds",
            "example": 100
          },
          "is_telnyx_billable": {
            "type": "boolean",
            "description": "Indicates whether Telnyx billing charges might be applicable",
            "example": false
          },
          "record_type": {
            "type": "string",
            "example": "conference_detail_record",
            "default": "conference_detail_record"
          }
        },
        "required": [
          "record_type"
        ]
      },
      "ConferenceEnded": {
        "type": "object",
        "title": "Conference Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.ended",
            "enum": [
              "conference.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              },
              "reason": {
                "type": "string",
                "enum": [
                  "all_left",
                  "host_left",
                  "time_exceeded"
                ],
                "description": "Reason the conference ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z",
            "reason": "host_left"
          }
        }
      },
      "ConferenceEndedEvent": {
        "type": "object",
        "title": "Conference Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceEnded"
          }
        }
      },
      "ConferenceFloorChangedEvent": {
        "type": "object",
        "title": "Conference Floor Changed",
        "example": {
          "record_type": "event",
          "event_type": "conference.floor.changed",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.floor.changed",
            "enum": [
              "conference.floor.changed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call Control ID of the new speaker."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "Call Leg ID of the new speaker."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Call Session ID of the new speaker."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that had a speaker change event."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceHoldRequest": {
        "type": "object",
        "title": "Conference Hold Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. When empty all participants will be placed on hold.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participants when they are put on hold. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participants when they are put on hold. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ],
          "audio_url": "http://example.com/message.wav"
        }
      },
      "ConferenceMuteRequest": {
        "type": "object",
        "title": "Conference Mute Request",
        "properties": {
          "call_control_ids": {
            "description": "Array of unique identifiers and tokens for controlling the call. When empty all participants will be muted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ]
        }
      },
      "ConferenceParticipantDetailRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Participant id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "user_id": {
            "type": "string",
            "description": "User id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "conference_id": {
            "type": "string",
            "description": "Conference id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "joined_at": {
            "type": "string",
            "description": "Participant join time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "left_at": {
            "type": "string",
            "description": "Participant leave time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "destination_number": {
            "type": "string",
            "description": "Number called by the participant to join the conference",
            "example": "+18005550199"
          },
          "originating_number": {
            "type": "string",
            "description": "Participant origin number used in the conference call",
            "example": "+18005550199"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies the conference call leg",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_session_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies with conference call session",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_sec": {
            "type": "integer",
            "description": "Duration of the conference call in seconds",
            "example": 100
          },
          "billed_sec": {
            "type": "integer",
            "description": "Duration of the conference call for billing purposes",
            "example": 120
          },
          "is_telnyx_billable": {
            "type": "boolean",
            "description": "Indicates whether Telnyx billing charges might be applicable",
            "example": true
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "example": "0.002"
          },
          "rate_measured_in": {
            "type": "string",
            "description": "Billing unit used to calculate the Telnyx billing cost",
            "example": "minutes"
          },
          "cost": {
            "type": "string",
            "description": "Currency amount for Telnyx billing cost",
            "example": "0.004"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "record_type": {
            "type": "string",
            "example": "conference_participant_detail_record",
            "default": "conference_participant_detail_record"
          }
        },
        "required": [
          "record_type"
        ]
      },
      "ConferenceParticipantJoined": {
        "type": "object",
        "title": "Conference Participant Joined",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.joined",
            "enum": [
              "conference.participant.joined"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.joined",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          }
        }
      },
      "ConferenceParticipantJoinedEvent": {
        "type": "object",
        "title": "Conference Participant Joined Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantJoined"
          }
        }
      },
      "ConferenceParticipantLeft": {
        "type": "object",
        "title": "Conference Participant Left",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.left",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.left",
            "enum": [
              "conference.participant.left"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              }
            }
          }
        }
      },
      "ConferenceParticipantLeftEvent": {
        "type": "object",
        "title": "Conference Participant Left Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantLeft"
          }
        }
      },
      "ConferenceParticipantPlaybackEnded": {
        "type": "object",
        "title": "Conference Participant Playback Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.playback.ended",
            "enum": [
              "conference.participant.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantPlaybackEndedEvent": {
        "type": "object",
        "title": "Conference Participant Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantPlaybackEnded"
          }
        }
      },
      "ConferenceParticipantPlaybackStarted": {
        "type": "object",
        "title": "Conference Participant Playback Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.playback.started",
            "enum": [
              "conference.participant.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantPlaybackStartedEvent": {
        "type": "object",
        "title": "Conference Participant Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantPlaybackStarted"
          }
        }
      },
      "ConferenceParticipantSpeakEnded": {
        "type": "object",
        "title": "Conference Participant Speak Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.speak.ended",
            "enum": [
              "conference.participant.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantSpeakEndedEvent": {
        "type": "object",
        "title": "Conference Participant Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantSpeakEnded"
          }
        }
      },
      "ConferenceParticipantSpeakStarted": {
        "type": "object",
        "title": "Conference Participant Speak Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.speak.started",
            "enum": [
              "conference.participant.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantSpeakStartedEvent": {
        "type": "object",
        "title": "Conference Participant Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantSpeakStarted"
          }
        }
      },
      "ConferencePlayRequest": {
        "type": "object",
        "title": "Conference Play Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back in the conference. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back in the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "loop": {
            "description": "The number of times the audio file should be played. If supplied, the value must be an integer between 1 and 100, or the special string `infinity` for an endless loop.",
            "example": "infinity",
            "default": 1,
            "$ref": "#/components/schemas/Loopcount"
          },
          "call_control_ids": {
            "description": "List of call control ids identifying participants the audio file should be played to. If not given, the audio file will be played to the entire conference.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "audio_url": "http://www.example.com/sounds/greeting.wav"
        }
      },
      "ConferencePlaybackEnded": {
        "type": "object",
        "title": "Conference Playback Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.playback.ended",
            "enum": [
              "conference.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferencePlaybackEndedEvent": {
        "type": "object",
        "title": "Conference Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferencePlaybackEnded"
          }
        }
      },
      "ConferencePlaybackStarted": {
        "type": "object",
        "title": "Conference Playback Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.playback.started",
            "enum": [
              "conference.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferencePlaybackStartedEvent": {
        "type": "object",
        "title": "Conference Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferencePlaybackStarted"
          }
        }
      },
      "ConferenceRecordingSaved": {
        "type": "object",
        "title": "Conference Recording Saved",
        "example": {
          "record_type": "event",
          "event_type": "conference.recording.saved",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "channels": "single",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "format": "mp3",
            "public_recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            },
            "recording_ended_at": "2018-02-02T22:20:27.521992Z",
            "recording_id": "4577f9a2-cf0e-44f3-ac57-9f95fb03fa47",
            "recording_started_at": "2021-05-11T10:17:03.692107Z",
            "recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            }
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.recording.saved",
            "enum": [
              "conference.recording.saved"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "channels": {
                "type": "string",
                "example": "single",
                "enum": [
                  "single",
                  "dual"
                ],
                "description": "Whether recording was recorded in `single` or `dual` channel."
              },
              "conference_id": {
                "type": "string",
                "format": "uuid",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference that is being recorded."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "format": {
                "description": "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.",
                "type": "string",
                "enum": [
                  "wav",
                  "mp3"
                ],
                "example": "mp3"
              },
              "public_recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              },
              "recording_ended_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521992Z",
                "description": "ISO 8601 datetime of when recording ended."
              },
              "recording_id": {
                "type": "string",
                "format": "uuid",
                "example": "4577f9a2-cf0e-44f3-ac57-9f95fb03fa47",
                "description": "ID of the conference recording."
              },
              "recording_started_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when recording started."
              },
              "recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              }
            }
          }
        }
      },
      "ConferenceRecordingSavedEvent": {
        "type": "object",
        "title": "Conference Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceRecordingSaved"
          }
        }
      },
      "ConferenceSpeakEnded": {
        "type": "object",
        "title": "Conference Speak Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.speak.ended",
            "enum": [
              "conference.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceSpeakEndedEvent": {
        "type": "object",
        "title": "Conference Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceSpeakEnded"
          }
        }
      },
      "ConferenceSpeakRequest": {
        "type": "object",
        "title": "Conference Speak Request",
        "required": [
          "payload",
          "voice",
          "language"
        ],
        "properties": {
          "call_control_ids": {
            "description": "Call Control IDs of participants who will hear the spoken text. When empty all participants will hear the spoken text.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 3,000 character limit.",
            "type": "string",
            "example": "Say this to participants"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "voice": {
            "description": "The gender of the voice used to speak the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language used to speak the text.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ],
          "payload": "Say this to participants",
          "payload_type": "text",
          "voice": "female",
          "language": "en-US",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "ConferenceSpeakStarted": {
        "type": "object",
        "title": "Conference Speak Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.speak.started",
            "enum": [
              "conference.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceSpeakStartedEvent": {
        "type": "object",
        "title": "Conference Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceSpeakStarted"
          }
        }
      },
      "ConferenceStopRequest": {
        "type": "object",
        "title": "Conference Stop Request",
        "properties": {
          "call_control_ids": {
            "description": "List of call control ids identifying participants the audio file should stop be played to. If not given, the audio will be stoped to the entire conference.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ConferenceUnholdRequest": {
        "required": [
          "call_control_ids"
        ],
        "type": "object",
        "title": "Conference Unhold Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unheld.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ]
        }
      },
      "ConferenceUnmuteRequest": {
        "type": "object",
        "title": "Conference Unmute Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unmuted. When empty all participants will be unmuted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ]
        }
      },
      "ConnectionId": {
        "description": "The ID of the connection used to send the fax.",
        "type": "string",
        "example": "234423"
      },
      "CreateConferenceRequest": {
        "required": [
          "call_control_id",
          "name"
        ],
        "type": "object",
        "title": "Create Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "name": {
            "description": "Name of the conference",
            "example": "Business",
            "type": "string"
          },
          "beep_enabled": {
            "description": "Whether a beep sound should be played when participants join and/or leave the conference.",
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "default": "never",
            "example": "on_exit",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string. The client_state will be updated for the creator call leg and will be used for all webhooks related to the created conference.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "comfort_noise": {
            "description": "Toggle background comfort noise.",
            "example": false,
            "type": "boolean",
            "default": true
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "duration_minutes": {
            "description": "Time length (minutes) after which the conference will end.",
            "example": 5,
            "type": "integer"
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to participants joining the conference. The URL can point to either a WAV or MP3 file. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to participants joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\"."
          },
          "max_participants": {
            "description": "The maximum number of active conference participants to allow. Must be between 2 and 800. Defaults to 250",
            "example": 3,
            "type": "integer"
          },
          "start_conference_on_create": {
            "description": "Whether the conference should be started on creation. If the conference isn't started all participants that join are automatically put on hold. Defaults to \"true\".",
            "example": false,
            "type": "boolean"
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "name": "Business",
          "beep_enabled": "always",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "duration_minutes": 5,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "start_conference_on_create": false,
          "max_participants": 250
        }
      },
      "CustomSipHeader": {
        "type": "object",
        "title": "Custom SIP Header",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "description": "The name of the header to add.",
            "type": "string",
            "example": "head_1"
          },
          "value": {
            "description": "The value of the header.",
            "type": "string",
            "example": "val_1"
          }
        },
        "example": {
          "name": "head_1",
          "value": "val_1"
        }
      },
      "DialogflowConfig": {
        "type": "object",
        "title": "Dialogflow Config",
        "properties": {
          "analyze_sentiment": {
            "description": "Enable sentiment analysis from Dialogflow.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "partial_automated_agent_reply": {
            "description": "Enable partial automated agent reply from Dialogflow.",
            "type": "boolean",
            "example": true,
            "default": false
          }
        }
      },
      "Direction": {
        "description": "The direction of the fax.",
        "type": "string",
        "example": "outbound",
        "enum": [
          "inbound",
          "outbound"
        ]
      },
      "EnqueueRequest": {
        "type": "object",
        "title": "Enqueue Request",
        "properties": {
          "queue_name": {
            "description": "The name of the queue the call should be put in. If a queue with a given name doesn't exist yet it will be created.",
            "type": "string",
            "example": "tier_1_support"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "max_wait_time_secs": {
            "description": "The number of seconds after which the call will be removed from the queue.",
            "type": "integer",
            "example": 600
          },
          "max_size": {
            "description": "The maximum number of calls allowed in the queue at a given time. Can't be modified for an existing queue.",
            "type": "integer",
            "default": 100,
            "example": 200
          }
        },
        "example": {
          "queue_name": "support",
          "max_wait_time_secs": 600,
          "max_size": 20,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "Error": {
        "required": [
          "code",
          "title"
        ],
        "properties": {
          "code": {
            "type": "string",
            "format": "int"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "type": "string",
                "format": "json-pointer"
              },
              "parameter": {
                "description": "Indicates which query parameter caused the error.",
                "type": "string"
              }
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "Errors": {
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Fax": {
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "example": "fax",
            "enum": [
              "fax"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "connection_id": {
            "$ref": "#/components/schemas/ConnectionId"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "media_url": {
            "$ref": "#/components/schemas/MediaUrl"
          },
          "media_name": {
            "$ref": "#/components/schemas/MediaName"
          },
          "to": {
            "$ref": "#/components/schemas/To"
          },
          "from": {
            "$ref": "#/components/schemas/From"
          },
          "quality": {
            "$ref": "#/components/schemas/Quality"
          },
          "status": {
            "description": "Status of the fax",
            "type": "string",
            "example": "queued",
            "enum": [
              "queued",
              "media.processed",
              "originated",
              "sending",
              "delivered",
              "failed",
              "initiated",
              "receiving",
              "media.processing",
              "received"
            ]
          },
          "webhook_url": {
            "description": "URL that will receive fax webhooks",
            "type": "string"
          },
          "webhook_failover_url": {
            "description": "Optional failover URL that will receive fax webhooks if webhook_url doesn't return a 2XX response",
            "type": "string"
          },
          "store_media": {
            "description": "Should fax media be stored on temporary URL. It does not support media_name.",
            "type": "boolean"
          },
          "stored_media_url": {
            "description": "If store_media was set to true, this is a link to temporary location. Link expires after 10 minutes.",
            "type": "string"
          },
          "created_at": {
            "description": "ISO 8601 timestamp when resource was created",
            "type": "string",
            "format": "datetime"
          },
          "updated_at": {
            "description": "ISO 8601 timestamp when resource was updated",
            "type": "string",
            "format": "datetime"
          }
        },
        "example": {
          "record_type": "fax",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "connection_id": "c-1",
          "direction": "outbound",
          "from": "+123",
          "to": "+456",
          "media_url": "http://www.example.com/fax.pdf",
          "store_media": true,
          "stored_media_url": "https://s3.amazonaws.com/faxes-dev/user-1/cf4a6b52-bf8e-4945-9f49-611d0d2b083b.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=xxxxxxxxxx%2F20200505%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200505T095917Z&X-Amz-Expires=7200&X-Amz-SignedHeaders=host&X-Amz-Signature=fac2af40464fcc77673ad762db86e34f9c1b91a82699b5578c5327f53874df51",
          "quality": "high",
          "webhook_url": "http://www.example.com/webhooks",
          "webhook_failover_url": "",
          "status": "queued",
          "created_at": "2020-05-05T09:59:12",
          "updated_at": "2020-05-05T09:59:12"
        }
      },
      "FaxDelivered": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.delivered",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "call_duration_secs": 25,
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "page_count": 2,
              "status": "delivered",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "event_type": {
            "type": "string",
            "example": "fax.delivered",
            "enum": [
              "fax.delivered"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_duration_secs": {
                "description": "The duration of the call in seconds.",
                "type": "integer",
                "example": 25
              },
              "connection_id": {
                "$ref": "#/components/schemas/ConnectionId"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "$ref": "#/components/schemas/FaxId"
              },
              "original_media_url": {
                "$ref": "#/components/schemas/OriginalMediaUrl"
              },
              "media_name": {
                "$ref": "#/components/schemas/MediaName"
              },
              "to": {
                "$ref": "#/components/schemas/To"
              },
              "from": {
                "$ref": "#/components/schemas/From"
              },
              "user_id": {
                "$ref": "#/components/schemas/UserId"
              },
              "page_count": {
                "description": "Number of transferred pages",
                "type": "integer",
                "example": 2
              },
              "status": {
                "type": "string",
                "example": "delivered",
                "enum": [
                  "delivered"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "FaxEmailRecipient": {
        "title": "Fax Email Recipient",
        "type": "string",
        "description": "Specifies an email address where faxes sent to this application will be forwarded to (as pdf or tiff attachments)",
        "default": null,
        "nullable": true,
        "format": "email",
        "example": "user@example.com"
      },
      "FaxFailed": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.failed",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "failure_reason": "rejected",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "failed",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "event_type": {
            "type": "string",
            "example": "fax.failed",
            "enum": [
              "fax.failed"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "$ref": "#/components/schemas/ConnectionId"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "$ref": "#/components/schemas/FaxId"
              },
              "original_media_url": {
                "$ref": "#/components/schemas/OriginalMediaUrl"
              },
              "media_name": {
                "$ref": "#/components/schemas/MediaName"
              },
              "to": {
                "$ref": "#/components/schemas/To"
              },
              "from": {
                "$ref": "#/components/schemas/From"
              },
              "user_id": {
                "$ref": "#/components/schemas/UserId"
              },
              "failure_reason": {
                "type": "string",
                "enum": [
                  "rejected"
                ],
                "description": "Cause of the sending failure"
              },
              "status": {
                "type": "string",
                "example": "failed",
                "enum": [
                  "failed"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "FaxId": {
        "type": "string",
        "format": "uuid",
        "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
        "description": "Identifies the fax."
      },
      "FaxMediaProcessed": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.media.processed",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "media.processed",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "event_type": {
            "type": "string",
            "example": "fax.media.processed",
            "enum": [
              "fax.media.processed"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "$ref": "#/components/schemas/ConnectionId"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "$ref": "#/components/schemas/FaxId"
              },
              "original_media_url": {
                "$ref": "#/components/schemas/OriginalMediaUrl"
              },
              "media_name": {
                "$ref": "#/components/schemas/MediaName"
              },
              "to": {
                "$ref": "#/components/schemas/To"
              },
              "from": {
                "$ref": "#/components/schemas/From"
              },
              "user_id": {
                "$ref": "#/components/schemas/UserId"
              },
              "status": {
                "type": "string",
                "example": "media.processed",
                "enum": [
                  "media.processed"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "FaxQueued": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.queued",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "queued",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "event_type": {
            "type": "string",
            "example": "fax.queued",
            "enum": [
              "fax.queued"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "$ref": "#/components/schemas/ConnectionId"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "$ref": "#/components/schemas/FaxId"
              },
              "original_media_url": {
                "$ref": "#/components/schemas/OriginalMediaUrl"
              },
              "media_name": {
                "$ref": "#/components/schemas/MediaName"
              },
              "to": {
                "$ref": "#/components/schemas/To"
              },
              "from": {
                "$ref": "#/components/schemas/From"
              },
              "user_id": {
                "$ref": "#/components/schemas/UserId"
              },
              "status": {
                "type": "string",
                "example": "queued",
                "enum": [
                  "queued"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "FaxSendingStarted": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.sending.started",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "sending",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "event_type": {
            "type": "string",
            "example": "fax.sending.started",
            "enum": [
              "fax.sending.started"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "$ref": "#/components/schemas/ConnectionId"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "$ref": "#/components/schemas/FaxId"
              },
              "original_media_url": {
                "$ref": "#/components/schemas/OriginalMediaUrl"
              },
              "media_name": {
                "$ref": "#/components/schemas/MediaName"
              },
              "to": {
                "$ref": "#/components/schemas/To"
              },
              "from": {
                "$ref": "#/components/schemas/From"
              },
              "user_id": {
                "$ref": "#/components/schemas/UserId"
              },
              "status": {
                "type": "string",
                "example": "sending",
                "enum": [
                  "sending"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "Feature": {
        "properties": {
          "name": {
            "type": "string",
            "example": "sms"
          }
        },
        "example": {
          "name": "sms"
        }
      },
      "From": {
        "description": "The phone number, in E.164 format, the fax will be sent from.",
        "type": "string",
        "example": "+13125790015"
      },
      "GatherRequest": {
        "type": "object",
        "title": "Gather",
        "properties": {
          "minimum_digits": {
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "default": 1,
            "type": "integer",
            "example": 1,
            "format": "int32"
          },
          "maximum_digits": {
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "default": 128,
            "type": "integer",
            "example": 10,
            "format": "int32"
          },
          "timeout_millis": {
            "description": "The number of milliseconds to wait to complete the request.",
            "default": 60000,
            "type": "integer",
            "example": 60000,
            "format": "int32"
          },
          "inter_digit_timeout_millis": {
            "description": "The number of milliseconds to wait for input between digits.",
            "default": 5000,
            "type": "integer",
            "example": 10000,
            "format": "int32"
          },
          "initial_timeout_millis": {
            "description": "The number of milliseconds to wait for the first DTMF.",
            "default": 5000,
            "type": "integer",
            "example": 10000,
            "format": "int32"
          },
          "terminating_digit": {
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "type": "string",
            "example": "#"
          },
          "valid_digits": {
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "type": "string",
            "example": "123"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "GatherUsingAudioRequest": {
        "type": "object",
        "title": "Gather Using Audio Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back at the beginning of each prompt. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back at the beginning of each prompt. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "invalid_audio_url": {
            "type": "string",
            "description": "The URL of a file to play when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The URL can point to either a WAV or MP3 file. invalid_media_name and invalid_audio_url cannot be used together in one request.",
            "example": "http://example.com/invalid.wav"
          },
          "invalid_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "minimum_digits": {
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "default": 1,
            "type": "integer",
            "example": 1,
            "format": "int32"
          },
          "maximum_digits": {
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "default": 128,
            "type": "integer",
            "example": 10,
            "format": "int32"
          },
          "maximum_tries": {
            "description": "The maximum number of times the file should be played if there is no input from the user on the call.",
            "default": 3,
            "type": "integer",
            "example": 3,
            "format": "int32"
          },
          "timeout_millis": {
            "description": "The number of milliseconds to wait for a DTMF response after file playback ends before a replaying the sound file.",
            "default": 60000,
            "type": "integer",
            "example": 60000,
            "format": "int32"
          },
          "terminating_digit": {
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "type": "string",
            "example": "#"
          },
          "valid_digits": {
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "type": "string",
            "example": "123"
          },
          "inter_digit_timeout_millis": {
            "description": "The number of milliseconds to wait for input between digits.",
            "default": 5000,
            "type": "integer",
            "example": 10000,
            "format": "int32"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "audio_url": "http://example.com/message.wav",
          "invalid_audio_url": "http://example.com/message.wav",
          "minimum_digits": 1,
          "maximum_digits": 10,
          "timeout_millis": 10000,
          "terminating_digit": "#",
          "valid_digits": "123",
          "inter_digit_timeout_millis": 10000,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "GatherUsingSpeakRequest": {
        "type": "object",
        "title": "Gather Using Speak Request",
        "required": [
          "voice",
          "language",
          "payload"
        ],
        "properties": {
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 3,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "invalid_payload": {
            "description": "The text or SSML to be converted into speech when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. There is a 3,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "service_level": {
            "description": "This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.",
            "default": "premium",
            "type": "string",
            "enum": [
              "basic",
              "premium"
            ],
            "example": "premium"
          },
          "voice": {
            "description": "The gender of the voice used to speak back the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language you want spoken.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "minimum_digits": {
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "default": 1,
            "type": "integer",
            "example": 1,
            "format": "int32"
          },
          "maximum_digits": {
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "default": 128,
            "type": "integer",
            "example": 10,
            "format": "int32"
          },
          "maximum_tries": {
            "description": "The maximum number of times that a file should be played back if there is no input from the user on the call.",
            "default": 3,
            "type": "integer",
            "example": 3,
            "format": "int32"
          },
          "timeout_millis": {
            "description": "The number of milliseconds to wait for a DTMF response after speak ends before a replaying the sound file.",
            "default": 60000,
            "type": "integer",
            "example": 60000,
            "format": "int32"
          },
          "terminating_digit": {
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "type": "string",
            "example": "#"
          },
          "valid_digits": {
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "type": "string",
            "example": "123"
          },
          "inter_digit_timeout_millis": {
            "description": "The number of milliseconds to wait for input between digits.",
            "default": 5000,
            "type": "integer",
            "example": 10000,
            "format": "int32"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "payload": "say this on call",
          "invalid_payload": "say this on call",
          "payload_type": "text",
          "service_level": "premium",
          "voice": "male",
          "language": "arb",
          "minimum_digits": 1,
          "maximum_digits": 10,
          "terminating_digit": "#",
          "valid_digits": "123",
          "inter_digit_timeout_millis": 10000,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "GenericError": {
        "properties": {
          "code": {
            "type": "string",
            "format": "int"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "type": "string",
                "format": "json-pointer"
              },
              "parameter": {
                "description": "Indicates which query parameter caused the error.",
                "type": "string"
              }
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "HangupRequest": {
        "type": "object",
        "title": "Hangup Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "http": {
        "description": "HTTP request and response information.",
        "properties": {
          "request": {
            "description": "Request details.",
            "properties": {
              "url": {
                "type": "string",
                "example": "https://example.com/webhooks"
              },
              "headers": {
                "$ref": "#/components/schemas/http_headers"
              }
            }
          },
          "response": {
            "description": "Response details, optional.",
            "nullable": true,
            "properties": {
              "status": {
                "type": "integer",
                "example": 200
              },
              "headers": {
                "$ref": "#/components/schemas/http_headers"
              },
              "body": {
                "description": "Raw response body, limited to 10kB.",
                "type": "string"
              }
            }
          }
        }
      },
      "http_headers": {
        "description": "List of headers, limited to 10kB.",
        "type": "array",
        "items": {
          "type": "string",
          "example": "Header-Name: header value"
        }
      },
      "Id": {
        "type": "string",
        "format": "uuid",
        "description": "Identifies the resource.",
        "readOnly": true,
        "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
      },
      "InitiateCallRequest": {
        "type": "object",
        "title": "Initiate Call Request",
        "required": [
          "To",
          "From"
        ],
        "properties": {
          "To": {
            "description": "The phone number of the called party. Phone numbers are formatted with a `+` and country code.",
            "example": "+16175551212",
            "type": "string"
          },
          "From": {
            "description": "The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and country code.",
            "example": "+16175551212",
            "type": "string"
          },
          "Url": {
            "description": "The URL from which Telnyx will retrieve the TeXML call instructions.",
            "example": "https://www.example.com/instructions.xml",
            "type": "string"
          },
          "UrlMethod": {
            "description": "HTTP request type used for `Url`. The default value is inherited from TeXML Application setting.",
            "example": "GET",
            "default": "POST",
            "type": "string",
            "enum": [
              "GET",
              "POST"
            ]
          },
          "FallbackUrl": {
            "description": "A failover URL for which Telnyx will retrieve the TeXML call instructions if the `Url` is not responding.",
            "example": "https://www.example.com/instructions-fallback.xml",
            "type": "string"
          },
          "StatusCallback": {
            "description": "URL destination for Telnyx to send status callback events to for the call.",
            "example": "https://www.example.com/callback",
            "type": "string"
          },
          "StatusCallbackMethod": {
            "description": "HTTP request type used for `StatusCallback`.",
            "example": "GET",
            "default": "POST",
            "type": "string",
            "enum": [
              "GET",
              "POST"
            ]
          },
          "StatusCallbackEvent": {
            "description": "The call events for which Telnyx should send a webhook. Multiple events can be defined when separated by a space.",
            "example": "iniated ringing",
            "default": "completed",
            "type": "string",
            "enum": [
              "initiated",
              "ringing",
              "answered",
              "completed"
            ]
          }
        },
        "example": {
          "To": "+13121230000",
          "From": "+13120001234",
          "Url": "https://www.example.com/texml.xml",
          "StatusCallback": "https://www.example.com/statuscallback-listener"
        }
      },
      "InitiateCallResult": {
        "type": "object",
        "title": "Initaite TeXML Call Result",
        "example": {
          "from": "+13120001234",
          "to": "+13121230000",
          "status": "queued"
        },
        "properties": {
          "from": {
            "type": "string",
            "example": "+13120001234"
          },
          "to": {
            "type": "string",
            "example": "+13120000000"
          },
          "status": {
            "type": "string",
            "example": "accepted"
          }
        }
      },
      "JoinConferenceRequest": {
        "required": [
          "call_control_id"
        ],
        "type": "object",
        "title": "Join Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string. Please note that the client_state will be updated for the participient call leg and the change will not affect conferencing webhooks unless the participient is the owner of the conference.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "end_conference_on_exit": {
            "description": "Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "soft_end_conference_on_exit": {
            "description": "Whether the conference should end after the participant leaves the conference. NOTE this doesn't hang up the other participants. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "hold": {
            "description": "Whether the participant should be put on hold immediately after joining the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "mute": {
            "description": "Whether the participant should be muted immediately after joining the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "start_conference_on_enter": {
            "description": "Whether the conference should be started after the participant joins the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "supervisor_role": {
            "description": "Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "beep_enabled": {
            "description": "Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.",
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "example": "on_exit",
            "type": "string"
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "end_conference_on_exit": true,
          "hold": true,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "mute": true,
          "start_conference_on_enter": true,
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ],
          "beep_enabled": "always"
        }
      },
      "LeaveConferenceRequest": {
        "required": [
          "call_control_id"
        ],
        "type": "object",
        "title": "Leave Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "f91269aa-61d1-417f-97b3-10e020e8bc47",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "beep_enabled": {
            "description": "Whether a beep sound should be played when the participant leaves the conference. Can be used to override the conference-level setting.",
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "example": "on_exit",
            "type": "string"
          }
        },
        "example": {
          "call_control_id": "c46e06d7-b78f-4b13-96b6-c576af9640ff",
          "beep_enabled": "never"
        }
      },
      "LeaveQueueRequest": {
        "type": "object",
        "title": "Leave Queue Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "MediaName": {
        "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.",
        "type": "string",
        "example": "my_media_uploaded_to_media_storage_api"
      },
      "MediaRequestBody": {
        "title": "Media Request Body",
        "description": "",
        "required": [
          "whatsapp_user_id",
          "media_content_type",
          "upload_file"
        ],
        "type": "object",
        "properties": {
          "whatsapp_user_id": {
            "type": "string",
            "description": "The user's WhatsApp ID."
          },
          "media_content_type": {
            "type": "string",
            "description": "The content-type of the uplaoded media."
          },
          "upload_file": {
            "type": "string",
            "format": "binary",
            "description": "The media to store with WhatsApp."
          }
        }
      },
      "MediaResource": {
        "type": "object",
        "title": "Media Resource",
        "properties": {
          "media_name": {
            "description": "Uniquely identifies a media resource.",
            "type": "string"
          },
          "expires_at": {
            "description": "ISO 8601 formatted date of when the media resource will expire and be deleted.",
            "type": "string",
            "example": "2020-01-23T18:10:02.574Z"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the media resource was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the media resource was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "content_type": {
            "type": "string",
            "description": "Content type of the file",
            "example": "application/xml"
          }
        },
        "example": {
          "media_name": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "expires_at": "2020-01-23T18:10:02.574Z",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "content_type": "application/xml"
        }
      },
      "MediaStorageDetailRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the Media Storage Event",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "created_at": {
            "type": "string",
            "description": "Event creation time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00Z"
          },
          "asset_id": {
            "type": "string",
            "description": "Asset id",
            "example": "a46f4764-4ce4-4391-804c-02f00bc4ff9b"
          },
          "user_id": {
            "type": "string",
            "description": "User id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "org_id": {
            "type": "string",
            "description": "Organization owner id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "action_type": {
            "type": "string",
            "description": "Type of action performed against the Media Storage API",
            "example": "upload"
          },
          "link_channel_type": {
            "type": "string",
            "description": "Link channel type",
            "example": "message"
          },
          "link_channel_id": {
            "type": "string",
            "description": "Link channel id",
            "example": "2065f482-64b9-4680-a3a9-c6d3142efdf7"
          },
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "failed"
          },
          "webhook_id": {
            "type": "string",
            "description": "Webhook id",
            "example": "b46f4764-4ce4-4391-804c-02f00bc4ff9b"
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "example": "0.0001"
          },
          "rate_measured_in": {
            "type": "string",
            "description": "Billing unit used to calculate the Telnyx billing cost",
            "example": "events"
          },
          "cost": {
            "type": "string",
            "description": "Currency amount for Telnyx billing cost",
            "example": "0.004"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "record_type": {
            "type": "string",
            "example": "media_storage",
            "default": "media_storage"
          }
        },
        "required": [
          "record_type"
        ]
      },
      "MediaUrl": {
        "description": "The URL to the PDF used for the fax's media. media_url and media_name/contents can't be submitted together.",
        "type": "string",
        "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
      },
      "Meta": {
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer",
            "example": 3
          },
          "total_results": {
            "type": "integer",
            "example": 55
          },
          "page_number": {
            "type": "integer",
            "example": 2
          },
          "page_size": {
            "type": "integer",
            "example": 25
          }
        }
      },
      "Metadata": {
        "type": "object",
        "title": "Metadata",
        "properties": {
          "total_pages": {
            "type": "number",
            "description": "Total number of pages based on pagination settings",
            "example": 13,
            "format": "double"
          },
          "total_results": {
            "type": "number",
            "description": "Total number of results",
            "example": 13,
            "format": "double"
          },
          "page_number": {
            "type": "number",
            "description": "Current Page based on pagination settings (included when defaults are used.)",
            "example": 3,
            "format": "double"
          },
          "page_size": {
            "type": "number",
            "description": "Number of results to return per page based on pagination settings (included when defaults are used.)",
            "example": 1,
            "format": "double"
          }
        }
      },
      "Monochrome": {
        "description": "The flag to enable monochrome, true black and white fax results.",
        "type": "boolean",
        "default": false
      },
      "Loopcount": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      },
      "OriginalMediaUrl": {
        "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
        "type": "string",
        "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer",
            "example": 3
          },
          "total_results": {
            "type": "integer",
            "example": 55
          },
          "page_number": {
            "type": "integer",
            "example": 2
          },
          "page_size": {
            "type": "integer",
            "example": 25
          }
        }
      },
      "PauseConferenceRecordingRequest": {
        "type": "object",
        "title": "Pause Recording Request",
        "properties": {
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "recording_id": {
            "description": "Use this field to pause specific recording.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "Participant": {
        "type": "object",
        "title": "Participant",
        "required": [
          "record_type",
          "id",
          "call_leg_id",
          "call_control_id",
          "conference",
          "whisper_call_control_ids",
          "created_at",
          "updated_at",
          "end_conference_on_exit",
          "soft_end_conference_on_exit",
          "status",
          "muted",
          "on_hold"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "participant"
            ],
            "example": "participant"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the participant",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Uniquely identifies the call leg associated with the participant",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_control_id": {
            "type": "string",
            "description": "Call Control ID associated with the partiipant of the conference",
            "example": "v2:v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ"
          },
          "conference": {
            "type": "object",
            "description": "Info about the conference that the participant is in",
            "properties": {
              "id": {
                "type": "string",
                "description": "Uniquely identifies the conference",
                "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              },
              "name": {
                "type": "string",
                "description": "Name of the conference",
                "example": "All hands meeting"
              }
            }
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the participant can whisper to..",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the participant was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the participant was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference will end and all remaining participants be hung up after the participant leaves the conference.",
            "example": true
          },
          "soft_end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference will end after the participant leaves the conference.",
            "example": true
          },
          "status": {
            "type": "string",
            "enum": [
              "joining",
              "joined",
              "left"
            ],
            "description": "The status of the participant with respect to the lifecycle within the conference",
            "example": "joining"
          },
          "muted": {
            "type": "boolean",
            "description": "Whether the participant is muted.",
            "example": true
          },
          "on_hold": {
            "type": "boolean",
            "description": "Whether the participant is put on_hold.",
            "example": true
          }
        },
        "example": {
          "record_type": "participant",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "end_conference_on_exit": true,
          "soft_end_conference_on_exit": true,
          "status": "joining",
          "muted": false,
          "on_hold": true,
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ],
          "id": "dfadada7-af74-47bc-83a4-554275f55f5c",
          "call_leg_id": "3a15df2d-c801-4729-adf5-b56dd42e2abb",
          "conference": {
            "id": "41b9acd4-f4da-4ff5-a85c-e07e90b53f46",
            "name": "1"
          }
        }
      },
      "PauseRecordingRequest": {
        "type": "object",
        "title": "Pause Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "PlayAudioUrlRequest": {
        "type": "object",
        "title": "Play Audio URL Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back on the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "loop": {
            "description": "The number of times the audio file should be played. If supplied, the value must be an integer between 1 and 100, or the special string `infinity` for an endless loop.",
            "$ref": "#/components/schemas/Loopcount",
            "example": "infinity",
            "default": 1
          },
          "overlay": {
            "description": "When enabled, audio will be mixed on top of any other audio that is actively being played back. Note that `overlay: true` will only work if there is another audio file already being played on the call.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "stop": {
            "description": "When specified, it stops the current audio being played. Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.",
            "type": "string",
            "example": "current"
          },
          "target_legs": {
            "description": "Specifies the leg or legs on which audio will be played. If supplied, the value must be either `self`, `opposite` or `both`.",
            "type": "string",
            "default": "self",
            "example": "self"
          },
          "cache_audio": {
            "description": "Caches the audio file. Useful when playing the same audio file multiple times during the call.",
            "type": "boolean",
            "default": true,
            "example": true
          },
          "playback_content": {
            "description": "Allows a user to provide base64 encoded mp3. Note: when using this parameter, `media_url` and `media_name` in the `playback_started` and `playback_ended` webhooks will be empty",
            "type": "string",
            "example": "SUQzAwAAAAADf1..."
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "loop": "infinity",
          "overlay": true,
          "stop": "current",
          "target_legs": "self",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "PlaybackStopRequest": {
        "type": "object",
        "title": "Playback Stop Request",
        "properties": {
          "overlay": {
            "description": "When enabled, it stops the audio being played in the overlay queue.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "stop": {
            "description": "Use `current` to stop the current audio being played. Use `all` to stop the current audio file being played and clear all audio files from the queue.",
            "type": "string",
            "example": "current",
            "default": "all"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "overlay": false,
          "stop": "all",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "SoundModifications": {
        "type": "object",
        "title": "Sound modifications",
        "description": "Use this field to modify sound effects, for example adjust the pitch.",
        "properties": {
          "pitch": {
            "description": "Set the pitch directly, value should be > 0, default 1 (lower = lower tone)",
            "type": "number",
            "format": "double",
            "example": 0.8
          },
          "semitone": {
            "description": "Adjust the pitch in semitones, values should be between -14 and 14, default 0",
            "type": "number",
            "format": "double",
            "example": -10
          },
          "octaves": {
            "description": "Adjust the pitch in octaves, values should be between -1 and 1, default 0",
            "type": "number",
            "format": "double",
            "example": -0.5
          },
          "track": {
            "description": "The track to which the sound modifications will be applied. Accepted values are `inbound` or `outbound`",
            "type": "string",
            "example": "inbound",
            "default": "outbound"
          }
        },
        "example": {
          "pitch": "0.8",
          "semitone": -2,
          "octaves": 0.1,
          "track": "both"
        }
      },
      "To": {
        "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
        "type": "string",
        "example": "+13127367276"
      },
      "UserId": {
        "description": "Identifier of the user to whom the fax belongs",
        "type": "string",
        "format": "uuid",
        "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
      },
      "Quality": {
        "description": "The quality of the fax. The `ultra` settings provides the highest quality available, but also present longer fax processing times. `ultra_light` is best suited for images, wihle `ultra_dark` is best suited for text.",
        "type": "string",
        "example": "high",
        "default": "high",
        "enum": [
          "normal",
          "high",
          "very_high",
          "ultra_light",
          "ultra_dark"
        ]
      },
      "Queue": {
        "type": "object",
        "title": "Queue",
        "required": [
          "record_type",
          "id",
          "name",
          "current_size",
          "max_size",
          "average_wait_time_secs",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "queue"
            ],
            "example": "queue"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the queue",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the queue",
            "example": "support"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the queue was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the queue was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "current_size": {
            "type": "integer",
            "description": "The number of calls currently in the queue",
            "example": 20
          },
          "max_size": {
            "type": "integer",
            "description": "The maximum number of calls allowed in the queue",
            "example": 50
          },
          "average_wait_time_secs": {
            "type": "integer",
            "description": "The average time that the calls currently in the queue have spent waiting, given in seconds.",
            "example": 175
          }
        },
        "example": {
          "record_type": "queue",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "support",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "current_size": 20,
          "max_size": 50,
          "average_wait_time_secs": 175
        }
      },
      "QueueCall": {
        "type": "object",
        "title": "QueueCall",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type",
          "connection_id",
          "from",
          "to",
          "enqueued_at",
          "wait_time_secs",
          "queue_position",
          "queue_id"
        ],
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "record_type": "queue_call",
          "connection_id": "7267xxxxxxxxxxxxxx",
          "from": "+18005550101",
          "to": "+18005550102",
          "enqueued_at": "2019-01-23T18:10:02.574Z",
          "wait_time_secs": 145,
          "queue_position": 3,
          "queue_id": "ae1626cc-6f42-11ea-becd-02420a0f8b69"
        },
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "queue_call"
            ],
            "example": "queue_call"
          },
          "call_session_id": {
            "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call.",
            "type": "string",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "connection_id": {
            "type": "string",
            "example": "7267xxxxxxxxxxxxxx",
            "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
          },
          "from": {
            "type": "string",
            "example": "+35319605860",
            "description": "Number or SIP URI placing the call."
          },
          "to": {
            "type": "string",
            "example": "+13129457420",
            "description": "Destination number or SIP URI of the call."
          },
          "enqueued_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the call was put in the queue",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "wait_time_secs": {
            "type": "integer",
            "description": "The time the call has been waiting in the queue, given in seconds",
            "example": 272
          },
          "queue_position": {
            "type": "integer",
            "description": "Current position of the call in the queue",
            "example": 3
          },
          "queue_id": {
            "type": "string",
            "description": "Unique identifier of the queue the call is in.",
            "example": "ae1626cc-6f42-11ea-becd-02420a0f8b69"
          }
        }
      },
      "Recording": {
        "type": "object",
        "title": "Recording",
        "required": [
          "record_type",
          "id",
          "created_at",
          "updated_at",
          "recording_started_at",
          "recording_ended_at",
          "duration_millis",
          "status",
          "channels",
          "source",
          "download_urls"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "recording"
            ],
            "example": "recording"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the recording",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "recording_started_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording started",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "recording_ended_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording ended",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "duration_millis": {
            "description": "The duration of the recording in milliseconds",
            "type": "integer",
            "format": "int32",
            "example": 60000
          },
          "status": {
            "type": "string",
            "enum": [
              "completed"
            ],
            "description": "The status of the recording. Only resources for `completed` recordings are currently supported",
            "example": "completed"
          },
          "channels": {
            "type": "string",
            "enum": [
              "single",
              "dual"
            ],
            "description": "When `dual`, final audio file has the first leg on channel A, and the rest on channel B.",
            "example": "single"
          },
          "source": {
            "type": "string",
            "enum": [
              "conference",
              "call"
            ],
            "description": "The kind of event that led to this recording being created",
            "example": "conference"
          },
          "conference_id": {
            "type": "string",
            "description": "If a conference recording, uniquely identifies the recorded conference",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_leg_id": {
            "type": "string",
            "description": "If a call recording, uniquely identifies the recorded call leg",
            "example": "11111111-5717-4562-b3fc-2c963f66afa6"
          },
          "call_session_id": {
            "type": "string",
            "description": "If a call recording, uniquely identifies the recorded call session",
            "example": "22222222-5717-4562-b3fc-2c963f66afa6"
          },
          "download_urls": {
            "type": "object",
            "description": "The links to download the recording files",
            "properties": {
              "mp3": {
                "type": "string",
                "description": "Link to download the recording in mp3 format"
              },
              "wav": {
                "type": "string",
                "description": "Link to download the recording in wav format"
              }
            }
          }
        },
        "example": {
          "record_type": "recording",
          "id": "dfadada7-af74-47bc-83a4-554275f55f5c",
          "created_at": "2019-03-29T13:10:00Z",
          "updated_at": "2019-03-29T14:10:00Z",
          "recording_started_at": "2019-03-29T11:10:00Z",
          "recording_ended_at": "2019-03-29T12:10:00Z",
          "duration_millis": 50000,
          "status": "completed",
          "channels": "single",
          "source": "conference",
          "conference_id": "41b9acd4-f4da-4ff5-a85c-e07e90b53f46",
          "call_leg_id": "11111111-5717-4562-b3fc-2c963f66afa6",
          "call_session_id": "22222222-5717-4562-b3fc-2c963f66afa6",
          "download_urls": {
            "mp3": "https://s3.amazonaws.com/some/path"
          }
        }
      },
      "RecordingCompleted": {
        "type": "object",
        "title": "Recording Completed",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "An identifier for the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "video.room.recording.completed",
            "enum": [
              "video.room.recording.completed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Uniquely identify the event."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "session_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
                "description": "Session ID associated with the recording."
              },
              "room_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
                "description": "Room ID associated with the recording."
              },
              "participant_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
                "description": "Participant ID associated with the recording."
              },
              "recording_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
                "description": "Recording ID that identifies the recording."
              },
              "type": {
                "type": "string",
                "example": "audio",
                "enum": [
                  "audio",
                  "video"
                ],
                "description": "Type of the recording."
              },
              "size_mb": {
                "description": "Recording size in MB.",
                "type": "number",
                "format": "float",
                "example": 10.5
              },
              "download_url": {
                "description": "Url to download the recording.",
                "type": "string",
                "example": "https://www.example.com"
              },
              "codec": {
                "description": "Codec used for the recording.",
                "type": "string",
                "example": "opus"
              },
              "duration_secs": {
                "description": "Recording duration in seconds.",
                "type": "integer",
                "example": 67
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "video.room.recording.started",
          "id": "6b61621f-62e0-4aad-ab11-9fd19e272e73",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "session_id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
            "room_id": "0ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
            "participant_id": "5ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
            "recording_id": "1ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
            "type": "audio",
            "download_url": "https://www.example.com",
            "duration_secs": 3660,
            "size_mb": 5.6,
            "codec": "opus"
          }
        }
      },
      "RecordingCompletedEvent": {
        "type": "object",
        "title": "Recording Completed Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecordingCompleted"
          }
        }
      },
      "RecordingResponse": {
        "type": "object",
        "title": "RecordingResponse",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecordingResponseData"
          }
        }
      },
      "RecordingResponseData": {
        "type": "object",
        "title": "RecordingResponseData",
        "properties": {
          "call_control_id": {
            "type": "string",
            "example": "v3:e-31OnvjEM7Y4wvxr3TKNk8M3QyLcGZPiUIzCGtwQtOtEjY-B0urkw",
            "description": "Unique identifier and token for controlling the call."
          },
          "call_leg_id": {
            "type": "string",
            "example": "84a97d76-e40f-11ed-9074-02420a0daa69",
            "description": "ID that is unique to the call and can be used to correlate webhook events."
          },
          "call_session_id": {
            "type": "string",
            "example": "84a97d76-e40f-11ed-9074-02420a0daa69",
            "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
          },
          "channels": {
            "type": "string",
            "enum": [
              "single",
              "dual"
            ],
            "description": "When `dual`, final audio file has the first leg on channel A, and the rest on channel B.",
            "example": "dual"
          },
          "conference_id": {
            "type": "string",
            "example": "84a97d76-e40f-11ed-9074-02420a0daa69",
            "description": "Uniquely identifies the conference."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "download_urls": {
            "type": "object",
            "description": "The links to download the recording files.",
            "properties": {
              "mp3": {
                "type": "string",
                "description": "Link to download the recording in mp3 format."
              },
              "wav": {
                "type": "string",
                "description": "Link to download the recording in wav format."
              }
            }
          },
          "duration_millis": {
            "description": "The duration of the recording in milliseconds.",
            "type": "integer",
            "format": "int32",
            "example": 60000
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the recording.",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "record_type": {
            "type": "string",
            "enum": [
              "recording"
            ],
            "example": "recording"
          },
          "recording_started_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording started.",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "recording_ended_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording ended.",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "source": {
            "type": "string",
            "enum": [
              "conference",
              "call"
            ],
            "description": "The kind of event that led to this recording being created.",
            "example": "conference"
          },
          "status": {
            "type": "string",
            "enum": [
              "completed"
            ],
            "description": "The status of the recording. Only resources for `completed` recordings are currently supported.",
            "example": "completed"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "RecordingStarted": {
        "type": "object",
        "title": "Recording Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "An identifier for the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "video.room.recording.started",
            "enum": [
              "video.room.recording.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Uniquely identify the event."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "session_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
                "description": "Session ID associated with the recording."
              },
              "room_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
                "description": "Room ID associated with the recording."
              },
              "participant_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
                "description": "Participant ID associated with the recording."
              },
              "recording_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
                "description": "Recording ID associated with the recording."
              },
              "type": {
                "type": "string",
                "example": "audio",
                "enum": [
                  "audio",
                  "video"
                ],
                "description": "Type of the recording."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "video.room.recording.started",
          "id": "6b61621f-62e0-4aad-ab11-9fd19e272e73",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "session_id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
            "room_id": "0ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
            "participant_id": "5ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
            "recording_id": "1ccc7b54-4df3-4bca-a65a-35a1ecc777f0",
            "type": "audio"
          }
        }
      },
      "RecordingStartedEvent": {
        "type": "object",
        "title": "Recording Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecordingStarted"
          }
        }
      },
      "RecordType": {
        "type": "string",
        "example": "event",
        "enum": [
          "event"
        ],
        "description": "Identifies the type of the resource."
      },
      "ReferRequest": {
        "type": "object",
        "title": "Refer request",
        "required": [
          "sip_address"
        ],
        "properties": {
          "sip_address": {
            "description": "The SIP URI to which the call will be referred to.",
            "type": "string",
            "example": "sip:username@sip.non-telnyx-address.com"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string"
          },
          "sip_headers": {
            "description": "SIP headers to be added to the request. Currently only User-to-User header is supported.",
            "type": "array",
            "example": [
              {
                "name": "User-to-User",
                "value": "value"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SipHeader"
            }
          }
        },
        "example": {
          "sip_address": "sip:username@sip.non-telnyx-address.com"
        }
      },
      "RegisterCallRequest": {
        "type": "object",
        "title": "RegisterCallRequest",
        "required": [
          "from",
          "to",
          "reason"
        ],
        "properties": {
          "from": {
            "description": "The DID that you will dial out from.",
            "type": "string",
            "example": "+15001340938"
          },
          "to": {
            "description": "The DID that you will dial out to.",
            "type": "string",
            "example": "+18005550100"
          },
          "reason": {
            "description": "The reason for call (this will be displayed on call recipient's device).",
            "type": "string",
            "example": "Confirm the Doctor appointment."
          }
        },
        "example": {
          "to": "+18005550100",
          "from": "+15001340938",
          "reason": "Confirm the Doctor appointment."
        }
      },
      "RejectRequest": {
        "type": "object",
        "title": "Reject Request",
        "required": [
          "cause"
        ],
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "cause": {
            "description": "Cause for call rejection.",
            "type": "string",
            "enum": [
              "CALL_REJECTED",
              "USER_BUSY"
            ],
            "example": "USER_BUSY"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "cause": "USER_BUSY"
        }
      },
      "ResumeConferenceRecordingRequest": {
        "type": "object",
        "title": "Pause Recording Request",
        "properties": {
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "recording_id": {
            "description": "Use this field to resume specific recording.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "ResumeRecordingRequest": {
        "type": "object",
        "title": "Pause Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "SendDTMFRequest": {
        "type": "object",
        "title": "Send DTMF Request",
        "required": [
          "digits"
        ],
        "properties": {
          "digits": {
            "description": "DTMF digits to send. Valid digits are 0-9, A-D, *, and #. Pauses can be added using w (0.5s) and W (1s).",
            "type": "string",
            "example": "1www2WABCDw9"
          },
          "duration_millis": {
            "description": "Specifies for how many milliseconds each digit will be played in the audio stream. Ranges from 100 to 500ms",
            "type": "integer",
            "format": "int32",
            "example": 500,
            "default": 250
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "digits": "1www2WABCDw9",
          "duration_millis": 500,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "SendFaxMultipartRequest": {
        "type": "object",
        "title": "Send fax multipart request",
        "required": [
          "connection_id",
          "contents",
          "from",
          "to"
        ],
        "properties": {
          "connection_id": {
            "$ref": "#/components/schemas/ConnectionId"
          },
          "contents": {
            "description": "The file you want to upload. The maximum allowed size is 20 MB. contents and media_name/media_url can't be submitted together.",
            "type": "string",
            "format": "binary"
          },
          "to": {
            "$ref": "#/components/schemas/To"
          },
          "from": {
            "$ref": "#/components/schemas/From"
          },
          "quality": {
            "$ref": "#/components/schemas/Quality"
          },
          "t38_enabled": {
            "$ref": "#/components/schemas/T38Enabled"
          },
          "monochrome": {
            "$ref": "#/components/schemas/Monochrome"
          },
          "store_media": {
            "$ref": "#/components/schemas/StoreMedia"
          }
        }
      },
      "SendFaxRequest": {
        "type": "object",
        "title": "Send fax request",
        "required": [
          "connection_id",
          "from",
          "to"
        ],
        "properties": {
          "connection_id": {
            "description": "The connection ID to send the fax with.",
            "type": "string",
            "example": "234423"
          },
          "media_url": {
            "$ref": "#/components/schemas/MediaUrl"
          },
          "media_name": {
            "$ref": "#/components/schemas/MediaName"
          },
          "to": {
            "$ref": "#/components/schemas/To"
          },
          "from": {
            "$ref": "#/components/schemas/From"
          },
          "quality": {
            "$ref": "#/components/schemas/Quality"
          },
          "t38_enabled": {
            "description": "The flag to disable the T.38 protocol.",
            "type": "boolean",
            "default": true
          },
          "monochrome": {
            "description": "The flag to enable monochrome, true black and white fax results.",
            "type": "boolean",
            "default": false
          },
          "store_media": {
            "description": "Should fax media be stored on temporary URL. It does not support media_name, they can't be submitted together.",
            "type": "boolean",
            "default": false
          },
          "webhook_url": {
            "description": "Use this field to override the URL to which Telnyx will send subsequent webhooks for this fax.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          }
        }
      },
      "SipHeader": {
        "type": "object",
        "title": "SIP Header",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "description": "The name of the header to add.",
            "type": "string",
            "enum": [
              "User-to-User"
            ],
            "example": "User-to-User"
          },
          "value": {
            "description": "The value of the header.",
            "type": "string",
            "example": "value"
          }
        },
        "example": {
          "name": "User-to-User",
          "value": "value"
        }
      },
      "SpeakRequest": {
        "type": "object",
        "title": "Speak Request",
        "required": [
          "payload",
          "voice",
          "language"
        ],
        "properties": {
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 3,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "service_level": {
            "description": "This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.",
            "default": "premium",
            "type": "string",
            "enum": [
              "basic",
              "premium"
            ],
            "example": "premium"
          },
          "stop": {
            "description": "When specified, it stops the current audio being played. Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.",
            "type": "string",
            "example": "current"
          },
          "voice": {
            "description": "The gender of the voice used to speak back the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language you want spoken.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "payload": "Say this on the call",
          "payload_type": "text",
          "service_level": "basic",
          "stop": "current",
          "voice": "female",
          "language": "arb",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartConferenceRecordingRequest": {
        "type": "object",
        "title": "Start Conference Recording Request",
        "required": [
          "format"
        ],
        "properties": {
          "format": {
            "description": "The audio file format used when storing the conference recording. Can be either `mp3` or `wav`.",
            "type": "string",
            "enum": [
              "wav",
              "mp3"
            ],
            "example": "mp3"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `conference_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "play_beep": {
            "description": "If enabled, a beep sound will be played at the start of a recording.",
            "type": "boolean",
            "example": true
          }
        },
        "example": {
          "format": "wav",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "play_beep": true
        }
      },
      "StartForkingRequest": {
        "type": "object",
        "title": "Start Forking Request",
        "properties": {
          "target": {
            "description": "The network target, <udp:ip_address:port>, where the call's RTP media packets should be forwarded. Both incoming and outgoing media packets will be delivered to the specified target, and information about the stream will be included in the encapsulation protocol header, including the direction (0 = inbound; 1 = outbound), leg (0 = A-leg; 1 = B-leg), and call_leg_id.",
            "type": "string",
            "example": "udp:192.0.2.1:9000"
          },
          "rx": {
            "description": "The network target, <udp:ip_address:port>, where the call's incoming RTP media packets should be forwarded.",
            "type": "string",
            "example": "udp:192.0.2.1:9000"
          },
          "stream_type": {
            "description": "Optionally specify a media type to stream. If `decrypted` selected, Telnyx will decrypt incoming SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.",
            "type": "string",
            "enum": [
              "raw",
              "decrypted"
            ],
            "default": "raw",
            "example": "decrypted"
          },
          "tx": {
            "description": "The network target, <udp:ip_address:port>, where the call's outgoing RTP media packets should be forwarded.",
            "type": "string",
            "example": "udp:192.0.2.1:9001"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "target": "udp:192.0.2.1:9000",
          "rx": "udp:192.0.2.1:9000",
          "tx": "udp:192.0.2.1:9001",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartRecordingRequest": {
        "type": "object",
        "title": "Start Recording Request",
        "required": [
          "format",
          "channels"
        ],
        "properties": {
          "format": {
            "description": "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.",
            "type": "string",
            "enum": [
              "wav",
              "mp3"
            ],
            "example": "mp3"
          },
          "channels": {
            "description": "When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.",
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "example": "single"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "play_beep": {
            "description": "If enabled, a beep sound will be played at the start of a recording.",
            "type": "boolean",
            "example": true
          },
          "max_length": {
            "description": "Defines the maximum length for the recording in seconds. The minimum value is 0. The maximum value is 14400. The default value is 0 (infinite)",
            "type": "integer",
            "example": 100,
            "default": 0,
            "format": "int32"
          },
          "timeout_secs": {
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. The minimum value is 0. The default value is 0 (infinite)",
            "type": "integer",
            "example": 100,
            "default": 0,
            "format": "int32"
          }
        },
        "example": {
          "format": "wav",
          "channels": "single",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "play_beep": true,
          "max_length": 0,
          "timeout_secs": 0
        }
      },
      "StartStreamingRequest": {
        "type": "object",
        "title": "Start Streaming Request",
        "properties": {
          "stream_url": {
            "description": "The destination WebSocket address where the stream is going to be delivered.",
            "type": "string",
            "example": "wss://www.example.com/websocket"
          },
          "stream_track": {
            "description": "Specifies which track should be streamed.",
            "type": "string",
            "enum": [
              "inbound_track",
              "outbound_track",
              "both_tracks"
            ],
            "default": "inbound_track",
            "example": "both_tracks"
          },
          "enable_dialogflow": {
            "description": "Enables Dialogflow for the current call. The default value is false.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "dialogflow_config": {
            "$ref": "#/components/schemas/DialogflowConfig"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "stream_url": "wss://www.example.com/websocket",
          "stream_track": "both_tracks",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "enable_dialogflow": false,
          "dialogflow_config": {
            "analyze_sentiment": false,
            "partial_automated_agent_reply": false
          }
        }
      },
      "StopForkingRequest": {
        "type": "object",
        "title": "Stop Forking Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "stream_type": {
            "description": "Optionally specify a `stream_type`. This should match the `stream_type` that was used in `fork_start` command to properly stop the fork.",
            "type": "string",
            "enum": [
              "raw",
              "decrypted"
            ],
            "default": "raw",
            "example": "decrypted"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopGatherRequest": {
        "type": "object",
        "title": "Stop Gather Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopRecordingRequest": {
        "type": "object",
        "title": "Stop Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopStreamingRequest": {
        "type": "object",
        "title": "Stop Streaming Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StoreMedia": {
        "description": "Should fax media be stored on temporary URL. It does not support media_name, they can't be submitted together.",
        "type": "boolean",
        "default": false
      },
      "StoredMedia": {
        "description": "Should fax media be stored on temporary URL. It does not support media_name, they can't be submitted together.",
        "type": "boolean",
        "default": false
      },
      "T38Enabled": {
        "description": "The flag to disable the T.38 protocol.",
        "type": "boolean",
        "default": true
      },
      "Transcription": {
        "type": "object",
        "title": "Transcription",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.transcription",
            "enum": [
              "call.transcription"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "description": "Unique identifier and token for controlling the call.",
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "transcription_data": {
                "type": "object",
                "properties": {
                  "confidence": {
                    "type": "number",
                    "format": "double",
                    "example": 0.977219,
                    "description": "Speech recognition confidence level."
                  },
                  "is_final": {
                    "type": "boolean",
                    "example": true,
                    "description": "When false, it means that this is an interim result."
                  },
                  "transcript": {
                    "type": "string",
                    "example": "hello this is a test speech",
                    "description": "Recognized text."
                  }
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.transcription",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:7subYr8fLrXmaAXm8egeAMpoSJ72J3SGPUuome81-hQuaKRf9b7hKA",
            "call_leg_id": "5ca81340-5beb-11eb-ae45-02420a0f8b69",
            "call_session_id": "5ca81eee-5beb-11eb-ba6c-02420a0f8b69",
            "client_state": null,
            "connection_id": "1240401930086254526",
            "transcription_data": {
              "confidence": 0.977219,
              "is_final": true,
              "transcript": "hello this is a test speech"
            }
          }
        }
      },
      "TranscriptionEvent": {
        "type": "object",
        "title": "Transcription Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Transcription"
          }
        }
      },
      "TranscriptionStartRequest": {
        "type": "object",
        "title": "Transcription start request",
        "properties": {
          "language": {
            "description": "Language to use for speech recognition",
            "type": "string",
            "enum": [
              "de",
              "en",
              "es",
              "fr",
              "it",
              "pl"
            ],
            "default": "en",
            "example": "en"
          },
          "interim_results": {
            "type": "boolean",
            "description": "Whether to send also interim results. If set to false, only final results will be sent.",
            "default": false,
            "example": true
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "transcription_tracks": {
            "description": "Indicates which leg of the call will be transcribed. Use `inbound` for the leg that requested the transcription, `outbound` for the other leg, and `both` for both legs of the call. Will default to `inbound`.",
            "type": "string",
            "example": "both",
            "default": "inbound"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "language": "en",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TranscriptionStopRequest": {
        "type": "object",
        "title": "Transcription stop request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TransferCallRequest": {
        "type": "object",
        "title": "Transfer Call Request",
        "required": [
          "to"
        ],
        "example": {
          "to": "+18005550100 or sip:username@sip.telnyx.com",
          "from": "+18005550101",
          "from_display_name": "Company Name",
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "timeout_secs": 60,
          "timeout_limit_secs": 60,
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "answering_machine_detection": "detect",
          "answering_machine_detection_config": {
            "total_analysis_time_millis": 5000,
            "after_greeting_silence_millis": 1000,
            "between_words_silence_millis": 1000,
            "greeting_duration_millis": 1000,
            "initial_silence_millis": 1000,
            "maximum_number_of_words": 1000,
            "maximum_word_length_millis": 2000,
            "silence_threshold": 512,
            "greeting_total_analysis_time_millis": 50000,
            "greeting_silence_duration_millis": 2000
          },
          "custom_headers": [
            {
              "name": "head_1",
              "value": "val_1"
            },
            {
              "name": "head_2",
              "value": "val_2"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "sip_auth_username": "username",
          "sip_auth_password": "password",
          "sip_headers": [
            {
              "name": "User-to-User",
              "value": "value"
            }
          ],
          "stream_url": "wss://www.example.com/websocket",
          "stream_track": "both_tracks"
        },
        "properties": {
          "to": {
            "description": "The DID or SIP URI to dial out to. Multiple DID or SIP URIs can be provided using an array of strings",
            "oneOf": [
              {
                "type": "string",
                "example": "+18005550100 or sip:username@sip.telnyx.com"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": "[\"+18005550100\", \"sip:username@sip.telnyx.com\"]"
              }
            ]
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `to` number of the original call if omitted.",
            "type": "string",
            "example": "+18005550101"
          },
          "from_display_name": {
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "type": "string",
            "example": "Company Name"
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back when the transfer destination answers before bridging the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back when the transfer destination answers before bridging the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "timeout_secs": {
            "description": "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being transferred. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.",
            "default": 30,
            "type": "integer",
            "example": 60,
            "format": "int32"
          },
          "time_limit_secs": {
            "description": "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.",
            "default": 14400,
            "type": "integer",
            "example": 600,
            "format": "int32",
            "minimum": 30,
            "maximum": 14400
          },
          "answering_machine_detection": {
            "description": "Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.",
            "default": "disabled",
            "type": "string",
            "enum": [
              "premium",
              "detect",
              "detect_beep",
              "detect_words",
              "greeting_end",
              "disabled"
            ]
          },
          "answering_machine_detection_config": {
            "description": "Optional configuration parameters to modify 'answering_machine_detection' performance.",
            "type": "object",
            "properties": {
              "total_analysis_time_millis": {
                "description": "Maximum timeout threshold for overall detection.",
                "default": 3500,
                "type": "integer",
                "example": 5000,
                "format": "int32"
              },
              "after_greeting_silence_millis": {
                "description": "Silence duration threshold after a greeting message or voice for it be considered human.",
                "default": 800,
                "type": "integer",
                "example": 1000,
                "format": "int32"
              },
              "between_words_silence_millis": {
                "description": "Maximum threshold for silence between words.",
                "default": 50,
                "type": "integer",
                "example": 100,
                "format": "int32"
              },
              "greeting_duration_millis": {
                "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine.",
                "default": 3500,
                "type": "integer",
                "example": 1500,
                "format": "int32"
              },
              "initial_silence_millis": {
                "description": "If initial silence duration is greater than this value, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 1800,
                "format": "int32"
              },
              "maximum_number_of_words": {
                "description": "If number of detected words is greater than this value, consder it a machine.",
                "default": 5,
                "type": "integer",
                "example": 3,
                "format": "int32"
              },
              "maximum_word_length_millis": {
                "description": "If a single word lasts longer than this threshold, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              },
              "silence_threshold": {
                "description": "Minimum noise threshold for any analysis.",
                "default": 256,
                "type": "integer",
                "example": 512,
                "format": "int32"
              },
              "greeting_total_analysis_time_millis": {
                "description": "If machine already detected, maximum timeout threshold to determine the end of the machine greeting.",
                "default": 5000,
                "type": "integer",
                "example": 7500,
                "format": "int32"
              },
              "greeting_silence_duration_millis": {
                "description": "If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.",
                "default": 1500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              }
            }
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "target_leg_client_state": {
            "description": "Use this field to add state to every subsequent webhook for the new leg. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string",
            "example": "username"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string",
            "example": "password"
          },
          "sip_headers": {
            "description": "SIP headers to be added to the SIP INVITE. Currently only User-to-User header is supported.",
            "type": "array",
            "example": [
              {
                "name": "User-to-User",
                "value": "value"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SipHeader"
            }
          },
          "sound_modifications": {
            "$ref": "#/components/schemas/SoundModifications"
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          }
        }
      },
      "UnauthorizedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericError"
          },
          {
            "properties": {
              "code": {
                "example": "10009"
              },
              "title": {
                "example": "Authentication failed"
              },
              "detail": {
                "example": "The required authentication headers were either invalid or not included in the request."
              },
              "meta": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "https://developers.telnyx.com/docs/overview/errors/10009"
                  }
                }
              }
            }
          }
        ]
      },
      "UnexpectedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericError"
          },
          {
            "properties": {
              "code": {
                "example": "10007"
              },
              "title": {
                "example": "Unexpected error"
              },
              "detail": {
                "example": "An unexpected error occurred."
              },
              "meta": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "https://developers.telnyx.com/docs/overview/errors/10007"
                  }
                }
              }
            }
          }
        ]
      },
      "UnprocessableEntityError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericError"
          },
          {
            "properties": {
              "code": {
                "example": "10002"
              },
              "title": {
                "example": "Invalid phone number"
              },
              "detail": {
                "example": "The phone number is invalid."
              },
              "source": {
                "type": "object",
                "properties": {
                  "pointer": {
                    "type": "string",
                    "example": "/phone_numbers"
                  }
                }
              },
              "meta": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "https://developers.telnyx.com/docs/overview/errors/10002"
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateConferenceRequest": {
        "required": [
          "call_control_id",
          "supervisor_role"
        ],
        "type": "object",
        "title": "Update Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "supervisor_role": {
            "description": "Sets the participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ]
        }
      },
      "UpdateMediaMultipartRequest": {
        "type": "object",
        "title": "Upload media multipart request",
        "properties": {
          "media": {
            "description": "The file you want to upload. The maximum allowed size is 20 MB.",
            "type": "string",
            "format": "binary"
          },
          "ttl_secs": {
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.",
            "type": "integer",
            "example": 86400
          }
        },
        "example": {
          "media": "string($binary)",
          "ttl_secs": 86400
        }
      },
      "UpdateMediaRequest": {
        "type": "object",
        "title": "Upload media request",
        "properties": {
          "media_url": {
            "description": "The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.",
            "type": "string",
            "example": "http://www.example.com/audio.mp3"
          },
          "ttl_secs": {
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.",
            "type": "integer",
            "example": 86400
          }
        },
        "example": {
          "media_url": "http://www.example.com/audio.mp3",
          "ttl_secs": 86400
        }
      },
      "UploadMedia": {
        "title": "Upload Media",
        "description": "",
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "whatsapp_media_id"
            ],
            "readOnly": true
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "record_type": "whatsapp_media_id",
          "id": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68"
        }
      },
      "UploadMediaMultipartRequest": {
        "type": "object",
        "title": "Upload media multipart request",
        "required": [
          "media"
        ],
        "properties": {
          "media": {
            "description": "The file you want to upload. The maximum allowed size is 20 MB.",
            "type": "string",
            "format": "binary"
          },
          "ttl_secs": {
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.",
            "type": "integer",
            "example": 86400
          },
          "media_name": {
            "description": "The unique identifier of a file.",
            "type": "string",
            "example": "my_file"
          }
        },
        "example": {
          "media": "string($binary)",
          "ttl_secs": 86400,
          "media_name": "my-file"
        }
      },
      "UploadMediaRequest": {
        "type": "object",
        "title": "Upload media request",
        "required": [
          "media_url"
        ],
        "properties": {
          "media_url": {
            "description": "The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.",
            "type": "string",
            "example": "http://www.example.com/audio.mp3"
          },
          "ttl_secs": {
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.",
            "type": "integer",
            "example": 86400
          },
          "media_name": {
            "description": "The unique identifier of a file.",
            "type": "string",
            "example": "my_file"
          }
        },
        "example": {
          "media_url": "http://www.example.com/audio.mp3",
          "ttl_secs": 86400,
          "media_name": "my-file"
        }
      },
      "attempt": {
        "description": "Webhook delivery attempt details.",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "delivered",
              "failed"
            ]
          },
          "started_at": {
            "description": "ISO 8601 timestamp indicating when the attempt was initiated.",
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "description": "ISO 8601 timestamp indicating when the attempt has finished.",
            "type": "string",
            "format": "date-time"
          },
          "http": {
            "$ref": "#/components/schemas/http"
          },
          "errors": {
            "description": "Webhook delivery errors.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "example": [
          {
            "status": "delivered",
            "started_at": "2020-08-10T14:00:05.364Z",
            "finished_at": "2020-08-10T14:00:05.595Z",
            "http": {
              "request": {
                "url": "https://fallback.example.com/webhooks",
                "headers": [
                  "Accept: */*"
                ]
              },
              "response": {
                "status": 200,
                "headers": [
                  "Content-Type: text/html"
                ],
                "body": "All good."
              }
            }
          },
          {
            "status": "failed",
            "started_at": "2020-08-10T14:00:05.004Z",
            "finished_at": "2020-08-10T14:00:05.360Z",
            "http": {
              "request": {
                "url": "https://typo.example.com/webhooks",
                "headers": [
                  "Accept: */*"
                ]
              },
              "response": {
                "status": 404,
                "headers": [
                  "Content-Type: text/html",
                  "Pragma: no-cache"
                ],
                "body": "Oops. Not found."
              }
            },
            "errors": [
              {
                "code": "75499",
                "title": "Webhook host returned HTTP 4XX",
                "detail": "The server returned another HTTP 4XX error"
              }
            ]
          },
          {
            "status": "failed",
            "started_at": "2020-08-10T14:00:00.000Z",
            "finished_at": "2020-08-10T14:00:05.000Z",
            "http": {
              "request": {
                "url": "https://slow.example.com/webhooks",
                "headers": [
                  "Accept: */*"
                ]
              },
              "reponse": null
            },
            "errors": [
              {
                "code": "75001",
                "title": "Could not resolve name",
                "detail": "Unable to resolve the webhook URL domain name"
              }
            ]
          }
        ]
      },
      "callRecordingError": {
        "type": "object",
        "title": "Call Recording Error",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.recording.error",
            "enum": [
              "call.recording.error"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "reason": {
                "type": "string",
                "example": "Internal server error",
                "enum": [
                  "Failed to authorize with storage using custom credentials",
                  "Invalid credentials json",
                  "Unsupported backend",
                  "Internal server error"
                ],
                "description": "Indication that there was a problem recording the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.recording.error",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "result": "Internal server error"
          }
        }
      },
      "callRecordingErrorEvent": {
        "type": "object",
        "title": "Call Recording Error Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/callRecordingError"
          }
        }
      },
      "error": {
        "properties": {
          "code": {
            "type": "string",
            "format": "int"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}