/**
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ParticipantConference } from '../models/ParticipantConference.ts';
import { HttpFile } from '../http/http.ts';

export class Participant {
    'recordType': ParticipantRecordTypeEnum;
    /**
    * Uniquely identifies the participant
    */
    'id': string;
    /**
    * Uniquely identifies the call leg associated with the participant
    */
    'callLegId': string;
    /**
    * Call Control ID associated with the partiipant of the conference
    */
    'callControlId': string;
    'conference': ParticipantConference;
    /**
    * Array of unique call_control_ids the participant can whisper to..
    */
    'whisperCallControlIds': Array<string>;
    /**
    * ISO 8601 formatted date of when the participant was created
    */
    'createdAt': string;
    /**
    * ISO 8601 formatted date of when the participant was last updated
    */
    'updatedAt': string;
    /**
    * Whether the conference will end and all remaining participants be hung up after the participant leaves the conference.
    */
    'endConferenceOnExit': boolean;
    /**
    * Whether the conference will end after the participant leaves the conference.
    */
    'softEndConferenceOnExit': boolean;
    /**
    * The status of the participant with respect to the lifecycle within the conference
    */
    'status': ParticipantStatusEnum;
    /**
    * Whether the participant is muted.
    */
    'muted': boolean;
    /**
    * Whether the participant is put on_hold.
    */
    'onHold': boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "recordType",
            "baseName": "record_type",
            "type": "ParticipantRecordTypeEnum",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "callLegId",
            "baseName": "call_leg_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "callControlId",
            "baseName": "call_control_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "conference",
            "baseName": "conference",
            "type": "ParticipantConference",
            "format": ""
        },
        {
            "name": "whisperCallControlIds",
            "baseName": "whisper_call_control_ids",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "string",
            "format": ""
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "string",
            "format": ""
        },
        {
            "name": "endConferenceOnExit",
            "baseName": "end_conference_on_exit",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "softEndConferenceOnExit",
            "baseName": "soft_end_conference_on_exit",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "ParticipantStatusEnum",
            "format": ""
        },
        {
            "name": "muted",
            "baseName": "muted",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "onHold",
            "baseName": "on_hold",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Participant.attributeTypeMap;
    }

    public constructor() {
    }
}


export type ParticipantRecordTypeEnum = "participant" ;
export type ParticipantStatusEnum = "joining" | "joined" | "left" ;

