/**
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Loopcount } from '../models/Loopcount.ts';
import { HttpFile } from '../http/http.ts';

export class PlayAudioUrlRequest {
    /**
    * The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.
    */
    'audioUrl'?: string;
    /**
    * The media_name of a file to be played back on the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.
    */
    'mediaName'?: string;
    'loop'?: Loopcount;
    /**
    * When enabled, audio will be mixed on top of any other audio that is actively being played back. Note that `overlay: true` will only work if there is another audio file already being played on the call.
    */
    'overlay'?: boolean;
    /**
    * When specified, it stops the current audio being played. Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.
    */
    'stop'?: string;
    /**
    * Specifies the leg or legs on which audio will be played. If supplied, the value must be either `self`, `opposite` or `both`.
    */
    'targetLegs'?: string;
    /**
    * Caches the audio file. Useful when playing the same audio file multiple times during the call.
    */
    'cacheAudio'?: boolean;
    /**
    * Allows a user to provide base64 encoded mp3. Note: when using this parameter, `media_url` and `media_name` in the `playback_started` and `playback_ended` webhooks will be empty
    */
    'playbackContent'?: string;
    /**
    * Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
    */
    'clientState'?: string;
    /**
    * Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
    */
    'commandId'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "audioUrl",
            "baseName": "audio_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "mediaName",
            "baseName": "media_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "loop",
            "baseName": "loop",
            "type": "Loopcount",
            "format": ""
        },
        {
            "name": "overlay",
            "baseName": "overlay",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "stop",
            "baseName": "stop",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetLegs",
            "baseName": "target_legs",
            "type": "string",
            "format": ""
        },
        {
            "name": "cacheAudio",
            "baseName": "cache_audio",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "playbackContent",
            "baseName": "playback_content",
            "type": "string",
            "format": ""
        },
        {
            "name": "clientState",
            "baseName": "client_state",
            "type": "string",
            "format": ""
        },
        {
            "name": "commandId",
            "baseName": "command_id",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PlayAudioUrlRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

