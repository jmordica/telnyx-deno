/**
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http.ts';

export class JoinConferenceRequest {
    /**
    * Unique identifier and token for controlling the call
    */
    'callControlId': string;
    /**
    * Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string. Please note that the client_state will be updated for the participient call leg and the change will not affect conferencing webhooks unless the participient is the owner of the conference.
    */
    'clientState'?: string;
    /**
    * Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.
    */
    'commandId'?: string;
    /**
    * Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to \"false\".
    */
    'endConferenceOnExit'?: boolean;
    /**
    * Whether the conference should end after the participant leaves the conference. NOTE this doesn\'t hang up the other participants. Defaults to \"false\".
    */
    'softEndConferenceOnExit'?: boolean;
    /**
    * Whether the participant should be put on hold immediately after joining the conference. Defaults to \"false\".
    */
    'hold'?: boolean;
    /**
    * The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".
    */
    'holdAudioUrl'?: string;
    /**
    * The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".
    */
    'holdMediaName'?: string;
    /**
    * Whether the participant should be muted immediately after joining the conference. Defaults to \"false\".
    */
    'mute'?: boolean;
    /**
    * Whether the conference should be started after the participant joins the conference. Defaults to \"false\".
    */
    'startConferenceOnEnter'?: boolean;
    /**
    * Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".
    */
    'supervisorRole'?: JoinConferenceRequestSupervisorRoleEnum;
    /**
    * Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.
    */
    'whisperCallControlIds'?: Array<string>;
    /**
    * Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.
    */
    'beepEnabled'?: JoinConferenceRequestBeepEnabledEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "callControlId",
            "baseName": "call_control_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "clientState",
            "baseName": "client_state",
            "type": "string",
            "format": ""
        },
        {
            "name": "commandId",
            "baseName": "command_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "endConferenceOnExit",
            "baseName": "end_conference_on_exit",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "softEndConferenceOnExit",
            "baseName": "soft_end_conference_on_exit",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hold",
            "baseName": "hold",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "holdAudioUrl",
            "baseName": "hold_audio_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "holdMediaName",
            "baseName": "hold_media_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "mute",
            "baseName": "mute",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "startConferenceOnEnter",
            "baseName": "start_conference_on_enter",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "supervisorRole",
            "baseName": "supervisor_role",
            "type": "JoinConferenceRequestSupervisorRoleEnum",
            "format": ""
        },
        {
            "name": "whisperCallControlIds",
            "baseName": "whisper_call_control_ids",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "beepEnabled",
            "baseName": "beep_enabled",
            "type": "JoinConferenceRequestBeepEnabledEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return JoinConferenceRequest.attributeTypeMap;
    }

    public constructor() {
    }
}


export type JoinConferenceRequestSupervisorRoleEnum = "barge" | "monitor" | "none" | "whisper" ;
export type JoinConferenceRequestBeepEnabledEnum = "always" | "never" | "on_enter" | "on_exit" ;

